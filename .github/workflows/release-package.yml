name: Chatbot LLM Service Package (GitHub)

# Configures this workflow to run every time a release is created.
on:
  release:
    types: [created]

# Defines custom environment variables for the workflow.
env:
  # Container registry domain
  REGISTRY: ghcr.io
  # Name for the Docker image that this workflow builds.
  IMAGE_NAME: ${{ github.repository }}

# The jobs that the workflow will run.
jobs:

  # Build and push job
  build-and-push-image:
    # Run on the latest available version of Ubuntu.
    runs-on: ubuntu-latest

    # Sets the permissions granted to the GITHUB_TOKEN for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    # Job execution steps
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # Sets up Miniconda required for the application building process
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f
        with:
          activate-environment: Talk2PowerSystemLLM
          environment-file: environment.yml
          auto-activate-base: false

      # Installs dependencies via Poetry and creates some required files
      - name: Install dependencies & create required files
        shell: bash -l {0}
        run: |
          conda activate Talk2PowerSystemLLM
          poetry install --no-interaction
          bash ./docker/generate-manifest.sh

      # Uses the docker/login-action action to log in to the Container registry using the account and password that will publish the packages.
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extracts tags and labels that will be applied to the specified image.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Builds the image, based on the Dockerfile. If the build succeeds, it will push the image to GitHub Packages.
      # Uses the tags and labels from the previous step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          file: /docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Generates an artifact attestation for the image.
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
