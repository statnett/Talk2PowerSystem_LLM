- description: A graph pattern which lists all values for breaker limited by parameters
    for none and by filter properties none.
  filters: []
  name: List breaker by parameters none and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters: []
  paraphrases:
  - What are the breakers in the dataset?
  - Can you identify all breakers present in the data?
  - List all the breakers available in the dataset.
  - Which entities are classified as breakers?
  - Show me all the breakers in the system.
  questions:
  - id: question_e3529a4bee52f543681d2f14bd759794
    parameter_bindings: {}
    question_text: Show me all the breakers in the system.
    reference_steps:
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b209ada6-1835-1540-8868-1cd5e65016c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:fdf147d4-240d-2143-b01a-84fc829bc284"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:bf62264e-c8f3-8f43-95c9-570f3337479c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:316f39b6-0fed-ea41-87a1-0f5119e136c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f56758a8-12a0-7648-b04b-f32ec3247e3b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:56013ae5-ff4f-2949-b59a-e60c62702d3e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:30b297b4-8e19-da40-9f52-fb9175136a22"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2973c36e-3d17-284c-a950-b86b9496acca"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:5ae8b25f-24cc-e34b-b238-2aea59d516c5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2384f146-deb2-c046-817c-6322a5381b9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0a46da9f-1326-254e-8a3b-649a431f6625"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3c4c59b7-461d-5b40-8f0e-2064845bbfdb"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cbd34307-2d45-ae47-872a-516888952750"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:13588bcf-c30d-7a49-beaa-67fcce61d305"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cefef4c4-1b45-af4b-8e13-275e0c9ffe27"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:373c4779-0905-d34c-bbc9-d200f848cbd9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7113e099-7f24-6a47-9fa2-94a2d57d6c9b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0169b8e7-c05b-3640-b55e-22b40081ca21"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7cc994ab-ddb9-8a4a-bbda-e91af59a06d9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:128ca899-5716-9341-a823-dd4c35385f2e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2714d85d-92e7-4f88-a488-f39e782a6298"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b16294fe-269c-4f3d-b6af-4bc473c663d6"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:808643b7-4e47-4faa-b906-999d0f1fe32b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2fb546e7-9e06-4356-a3ad-7e3756c34f6a"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:48668646-105a-490d-aaad-3259b852aa23"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: ?breaker a cim:Breaker .
  template_id: template_list_12258d33c3453393e6a78deb321f10d7
- description: A graph pattern which lists all values for breaker limited by parameters
    for bay (https://cim.ucaiug.io/rules#isPart) and by filter properties none.
  filters: []
  name: List breaker by parameters bay and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPart
    type: https://cim.ucaiug.io/ns#Bay
  paraphrases:
  - Which breakers are part of $ObjectIdentity(0, cim:Bay)?
  - Can you identify all circuit breakers that belong to $ObjectIdentity(0, cim:Bay)?
  - Show me the breakers contained within $ObjectIdentity(0, cim:Bay).
  - What are the breakers associated with $ObjectIdentity(0, cim:Bay)?
  - List all breakers that are components of $ObjectIdentity(0, cim:Bay).
  questions:
  - id: question_4fbd3cd10c92756c24d9653a6178792e
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:cf91c2cb-551a-e14c-8295-85c979c5c75e
    question_text: List all breakers that are components of KRISTIAN300G1.
    reference_steps:
    - - args:
          query: KRISTIAN300G1
        name: iri_discovery
        output: urn:uuid:cf91c2cb-551a-e14c-8295-85c979c5c75e
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:cf91c2cb-551a-e14c-8295-85c979c5c75e> .

            <urn:uuid:cf91c2cb-551a-e14c-8295-85c979c5c75e> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:bf62264e-c8f3-8f43-95c9-570f3337479c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cefef4c4-1b45-af4b-8e13-275e0c9ffe27"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_805acf516009dca30298ac40a2231c77
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:c5571223-50fe-4a26-a24f-7f1cabf61137
    question_text: List all breakers that are components of c5571223-50fe-4a26-a24f-7f1cabf61137.
    reference_steps:
    - - args:
          query: c5571223-50fe-4a26-a24f-7f1cabf61137
        name: iri_discovery
        output: urn:uuid:c5571223-50fe-4a26-a24f-7f1cabf61137
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:c5571223-50fe-4a26-a24f-7f1cabf61137> .

            <urn:uuid:c5571223-50fe-4a26-a24f-7f1cabf61137> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_603d90b19398bb2e137c0f9d9fc4c5a4
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:f72994d8-9857-b349-a4ae-2e3c9652d5bc
    question_text: List all breakers that are components of f72994d8-9857-b349-a4ae-2e3c9652d5bc.
    reference_steps:
    - - args:
          query: f72994d8-9857-b349-a4ae-2e3c9652d5bc
        name: iri_discovery
        output: urn:uuid:f72994d8-9857-b349-a4ae-2e3c9652d5bc
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:f72994d8-9857-b349-a4ae-2e3c9652d5bc> .

            <urn:uuid:f72994d8-9857-b349-a4ae-2e3c9652d5bc> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0a46da9f-1326-254e-8a3b-649a431f6625"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_9d6aab93f466818109d8b8749ebd507e
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d
    question_text: Can you identify all circuit breakers that belong to f2b5acf1-6067-4d18-9d75-ea1611013a3d?
    reference_steps:
    - - args:
          query: f2b5acf1-6067-4d18-9d75-ea1611013a3d
        name: iri_discovery
        output: urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d> .

            <urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2714d85d-92e7-4f88-a488-f39e782a6298"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_cce30bc5f042d5bf571d1679a1240516
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:e789e752-840f-6244-aca3-735295ad7b1e
    question_text: List all breakers that are components of KRISTIAN300AR1.
    reference_steps:
    - - args:
          query: KRISTIAN300AR1
        name: iri_discovery
        output: urn:uuid:e789e752-840f-6244-aca3-735295ad7b1e
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:e789e752-840f-6244-aca3-735295ad7b1e> .

            <urn:uuid:e789e752-840f-6244-aca3-735295ad7b1e> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2384f146-deb2-c046-817c-6322a5381b9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3c4c59b7-461d-5b40-8f0e-2064845bbfdb"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPart {$ObjectIdentity(0, cim:Bay)} .

    {$ObjectIdentity(0, cim:Bay)} a cim:Bay ;

    .'
  template_id: template_list_8712d2adc6cde4f841d5553b6b20dde7
- description: A graph pattern which lists all values for breaker limited by parameters
    for substation (https://cim.ucaiug.io/rules#isPartTransitive) and by filter properties
    none.
  filters: []
  name: List breaker by parameters substation and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPartTransitive
    type: https://cim.ucaiug.io/ns#Substation
  paraphrases:
  - What breakers are located in the substation $ObjectIdentity(0, cim:Substation)?
  - Can you list all circuit breakers that are part of $ObjectIdentity(0, cim:Substation)?
  - Show me the breakers that belong to the substation $ObjectIdentity(0, cim:Substation).
  - Which breakers are functionally included in $ObjectIdentity(0, cim:Substation)?
  - Find all breaker equipment that is part of the infrastructure of $ObjectIdentity(0,
    cim:Substation).
  questions:
  - id: question_9e015c7a0df6ce208f87a0fc7fa2b4c3
    parameter_bindings:
      $ObjectIdentity(0, cim:Substation): urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
    question_text: Show me the breakers that belong to the substation 681a1e63-5a55-11eb-a658-74e5f963e191.
    reference_steps:
    - - args:
          query: 681a1e63-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2714d85d-92e7-4f88-a488-f39e782a6298"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2fb546e7-9e06-4356-a3ad-7e3756c34f6a"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_1dcfbcca53fc4af80661d265f9443638
    parameter_bindings:
      $ObjectIdentity(0, cim:Substation): urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191
    question_text: Which breakers are functionally included in ENGENE?
    reference_steps:
    - - args:
          query: ENGENE
        name: iri_discovery
        output: urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b16294fe-269c-4f3d-b6af-4bc473c663d6"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:808643b7-4e47-4faa-b906-999d0f1fe32b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_48621af38952ef1fd29ffb739ffd5d4f
    parameter_bindings:
      $ObjectIdentity(0, cim:Substation): urn:uuid:27a21834-5457-4f1b-ad5c-1c69ff88fbd4
    question_text: Can you list all circuit breakers that are part of TELEMA2 04 CB5?
    reference_steps:
    - - args:
          query: TELEMA2 04 CB5
        name: iri_discovery
        output: urn:uuid:27a21834-5457-4f1b-ad5c-1c69ff88fbd4
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:27a21834-5457-4f1b-ad5c-1c69ff88fbd4>
            .

            <urn:uuid:27a21834-5457-4f1b-ad5c-1c69ff88fbd4> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_a499fd31e619bbaa0e88a1295fce44c8
    parameter_bindings:
      $ObjectIdentity(0, cim:Substation): urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f
    question_text: Find all breaker equipment that is part of the infrastructure of
      f1769670-9aeb-11e5-91da-b8763fd99c5f.
    reference_steps:
    - - args:
          query: f1769670-9aeb-11e5-91da-b8763fd99c5f
        name: iri_discovery
        output: urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f56758a8-12a0-7648-b04b-f32ec3247e3b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:5ae8b25f-24cc-e34b-b238-2aea59d516c5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0a46da9f-1326-254e-8a3b-649a431f6625"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cbd34307-2d45-ae47-872a-516888952750"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7113e099-7f24-6a47-9fa2-94a2d57d6c9b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:48668646-105a-490d-aaad-3259b852aa23"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_e351d2ab02b605b392b61689db246583
    parameter_bindings:
      $ObjectIdentity(0, cim:Substation): urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
    question_text: Which breakers are functionally included in f176965a-9aeb-11e5-91da-b8763fd99c5f?
    reference_steps:
    - - args:
          query: f176965a-9aeb-11e5-91da-b8763fd99c5f
        name: iri_discovery
        output: urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b209ada6-1835-1540-8868-1cd5e65016c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:fdf147d4-240d-2143-b01a-84fc829bc284"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:bf62264e-c8f3-8f43-95c9-570f3337479c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:316f39b6-0fed-ea41-87a1-0f5119e136c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:56013ae5-ff4f-2949-b59a-e60c62702d3e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:30b297b4-8e19-da40-9f52-fb9175136a22"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2973c36e-3d17-284c-a950-b86b9496acca"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2384f146-deb2-c046-817c-6322a5381b9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3c4c59b7-461d-5b40-8f0e-2064845bbfdb"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:13588bcf-c30d-7a49-beaa-67fcce61d305"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cefef4c4-1b45-af4b-8e13-275e0c9ffe27"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:373c4779-0905-d34c-bbc9-d200f848cbd9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0169b8e7-c05b-3640-b55e-22b40081ca21"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7cc994ab-ddb9-8a4a-bbda-e91af59a06d9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:128ca899-5716-9341-a823-dd4c35385f2e"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPartTransitive {$ObjectIdentity(0, cim:Substation)} .

    {$ObjectIdentity(0, cim:Substation)} a cim:Substation ;

    .'
  template_id: template_list_f9d044e071d57cf720cce80101660d76
- description: A graph pattern which lists all values for breaker limited by parameters
    for feature (https://cim.ucaiug.io/rules#isPartTransitive) and by filter properties
    none.
  filters: []
  name: List breaker by parameters feature and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPartTransitive
    type: http://www.opengis.net/ont/geosparql#Feature
  paraphrases:
  - Which circuit breakers are part of $ObjectIdentity(0, geo:Feature)?
  - Can you identify all breakers that belong to $ObjectIdentity(0, geo:Feature)?
  - List all breakers that are included as part of $ObjectIdentity(0, geo:Feature).
  - What are the breakers associated with $ObjectIdentity(0, geo:Feature) through
    transitive part relationships?
  - Show me the circuit breakers that are part of the geographical feature $ObjectIdentity(0,
    geo:Feature).
  questions:
  - id: question_2b32cb6b2547b6bf6d2f2ae8c1ad9cf5
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f
    question_text: List all breakers that are included as part of ARENDAL.
    reference_steps:
    - - args:
          query: ARENDAL
        name: iri_discovery
        output: urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:f1769670-9aeb-11e5-91da-b8763fd99c5f> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f56758a8-12a0-7648-b04b-f32ec3247e3b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:5ae8b25f-24cc-e34b-b238-2aea59d516c5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0a46da9f-1326-254e-8a3b-649a431f6625"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cbd34307-2d45-ae47-872a-516888952750"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7113e099-7f24-6a47-9fa2-94a2d57d6c9b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:48668646-105a-490d-aaad-3259b852aa23"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_efd99b6a8891c6310eda91ebb519a685
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
    question_text: What are the breakers associated with 681a1e63-5a55-11eb-a658-74e5f963e191
      through transitive part relationships?
    reference_steps:
    - - args:
          query: 681a1e63-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2714d85d-92e7-4f88-a488-f39e782a6298"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2fb546e7-9e06-4356-a3ad-7e3756c34f6a"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_b42877e7dd14ca7a46ce08f71eaffef9
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71
    question_text: List all breakers that are included as part of TELEMA2 04 CB3.
    reference_steps:
    - - args:
          query: TELEMA2 04 CB3
        name: iri_discovery
        output: urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71>
            .

            <urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_1d655b9befa08f97cd5a506047774b47
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191
    question_text: List all breakers that are included as part of ENGENE.
    reference_steps:
    - - args:
          query: ENGENE
        name: iri_discovery
        output: urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b16294fe-269c-4f3d-b6af-4bc473c663d6"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:808643b7-4e47-4faa-b906-999d0f1fe32b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_581f7d90e0b582d0a3e96123e16a6ef4
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:681a2179-5a55-11eb-a658-74e5f963e191
    question_text: List all breakers that are included as part of 681a2179-5a55-11eb-a658-74e5f963e191.
    reference_steps:
    - - args:
          query: 681a2179-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a2179-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a2179-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a2179-5a55-11eb-a658-74e5f963e191> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPartTransitive {$ObjectIdentity(0, geo:Feature)} .

    {$ObjectIdentity(0, geo:Feature)} a geo:Feature ;

    .'
  template_id: template_list_ab5f3abd35ac6f2a3a81f52e54836199
- description: A graph pattern which lists all values for breaker limited by parameters
    for voltagelevel (https://cim.ucaiug.io/rules#isPartTransitive) and by filter
    properties none.
  filters: []
  name: List breaker by parameters voltagelevel and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPartTransitive
    type: https://cim.ucaiug.io/ns#VoltageLevel
  paraphrases:
  - Which circuit breakers are part of the $ObjectIdentity(0, cim:VoltageLevel) voltage
    level?
  - Can you identify all breakers that belong to $ObjectIdentity(0, cim:VoltageLevel)?
  - What are the circuit breakers included within the voltage level $ObjectIdentity(0,
    cim:VoltageLevel)?
  - List all breakers that are transitive parts of $ObjectIdentity(0, cim:VoltageLevel).
  - Show me the circuit breaker equipment associated with the $ObjectIdentity(0, cim:VoltageLevel)
    voltage level.
  questions:
  - id: question_3495ff098f7d1504e85bc3f86ddb771a
    parameter_bindings:
      $ObjectIdentity(0, cim:VoltageLevel): urn:uuid:d4addb12-e956-e44b-9a9d-f118fdbe49f8
    question_text: What are the circuit breakers included within the voltage level
      d4addb12-e956-e44b-9a9d-f118fdbe49f8?
    reference_steps:
    - - args:
          query: d4addb12-e956-e44b-9a9d-f118fdbe49f8
        name: iri_discovery
        output: urn:uuid:d4addb12-e956-e44b-9a9d-f118fdbe49f8
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:d4addb12-e956-e44b-9a9d-f118fdbe49f8>
            .

            <urn:uuid:d4addb12-e956-e44b-9a9d-f118fdbe49f8> a cim:VoltageLevel ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_7eb75d1892a80fde14703786c64b25a6
    parameter_bindings:
      $ObjectIdentity(0, cim:VoltageLevel): urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3
    question_text: What are the circuit breakers included within the voltage level
      1f4fabd4-8c57-c245-b107-4e64c9007ae3?
    reference_steps:
    - - args:
          query: 1f4fabd4-8c57-c245-b107-4e64c9007ae3
        name: iri_discovery
        output: urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3>
            .

            <urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3> a cim:VoltageLevel ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_72bfbaf5a58bef811b4ce712481c6c17
    parameter_bindings:
      $ObjectIdentity(0, cim:VoltageLevel): urn:uuid:681a1e4e-5a55-11eb-a658-74e5f963e191
    question_text: List all breakers that are transitive parts of 681a1e4e-5a55-11eb-a658-74e5f963e191.
    reference_steps:
    - - args:
          query: 681a1e4e-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a1e4e-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a1e4e-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a1e4e-5a55-11eb-a658-74e5f963e191> a cim:VoltageLevel ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b16294fe-269c-4f3d-b6af-4bc473c663d6"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:808643b7-4e47-4faa-b906-999d0f1fe32b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_5aa1497dbd9b4ee140b517805d78489a
    parameter_bindings:
      $ObjectIdentity(0, cim:VoltageLevel): urn:uuid:8da6d670-4607-4432-abce-49614b85fd8e
    question_text: What are the circuit breakers included within the voltage level
      04 TELEMA 2 VL5?
    reference_steps:
    - - args:
          query: 04 TELEMA 2 VL5
        name: iri_discovery
        output: urn:uuid:8da6d670-4607-4432-abce-49614b85fd8e
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:8da6d670-4607-4432-abce-49614b85fd8e>
            .

            <urn:uuid:8da6d670-4607-4432-abce-49614b85fd8e> a cim:VoltageLevel ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_31e8f93976693cfcee34f6f334d7b5f4
    parameter_bindings:
      $ObjectIdentity(0, cim:VoltageLevel): urn:uuid:681a1e17-5a55-11eb-a658-74e5f963e191
    question_text: Show me the circuit breaker equipment associated with the 681a1e17-5a55-11eb-a658-74e5f963e191
      voltage level.
    reference_steps:
    - - args:
          query: 681a1e17-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a1e17-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:681a1e17-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:681a1e17-5a55-11eb-a658-74e5f963e191> a cim:VoltageLevel ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPartTransitive {$ObjectIdentity(0, cim:VoltageLevel)} .

    {$ObjectIdentity(0, cim:VoltageLevel)} a cim:VoltageLevel ;

    .'
  template_id: template_list_f2339d0f390f199a114a42ce815193c6
- description: A graph pattern which lists all values for breaker limited by parameters
    for bay (https://cim.ucaiug.io/rules#isPartTransitive) and by filter properties
    none.
  filters: []
  name: List breaker by parameters bay and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPartTransitive
    type: https://cim.ucaiug.io/ns#Bay
  paraphrases:
  - Which circuit breakers are part of $ObjectIdentity(0, cim:Bay)?
  - Can you identify all breakers contained within $ObjectIdentity(0, cim:Bay)?
  - What are the breakers that belong to $ObjectIdentity(0, cim:Bay)?
  - List all circuit breakers that are transitive parts of $ObjectIdentity(0, cim:Bay).
  - Show me the breakers that are associated with $ObjectIdentity(0, cim:Bay).
  questions:
  - id: question_deb0897681e5e7e4d2982598c1700ffe
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:270e76e1-9738-5942-8fd5-ebabca4dfdad
    question_text: Can you identify all breakers contained within KRISTIAN300G2?
    reference_steps:
    - - args:
          query: KRISTIAN300G2
        name: iri_discovery
        output: urn:uuid:270e76e1-9738-5942-8fd5-ebabca4dfdad
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:270e76e1-9738-5942-8fd5-ebabca4dfdad>
            .

            <urn:uuid:270e76e1-9738-5942-8fd5-ebabca4dfdad> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:13588bcf-c30d-7a49-beaa-67fcce61d305"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:128ca899-5716-9341-a823-dd4c35385f2e"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_6c505f5059a87fe702a21d19c35e5341
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3
    question_text: Can you identify all breakers contained within KRISTIAN300FE1?
    reference_steps:
    - - args:
          query: KRISTIAN300FE1
        name: iri_discovery
        output: urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3>
            .

            <urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:fdf147d4-240d-2143-b01a-84fc829bc284"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_c18d4927532926f1b532d788c7da18b5
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:7aff3ae4-1afa-b046-af50-4e8222f094ef
    question_text: Can you identify all breakers contained within ENGENE 22 NT Ba1?
    reference_steps:
    - - args:
          query: ENGENE 22 NT Ba1
        name: iri_discovery
        output: urn:uuid:7aff3ae4-1afa-b046-af50-4e8222f094ef
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:7aff3ae4-1afa-b046-af50-4e8222f094ef>
            .

            <urn:uuid:7aff3ae4-1afa-b046-af50-4e8222f094ef> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:808643b7-4e47-4faa-b906-999d0f1fe32b"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_9449e40f410ce755715d34873e72bbd3
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:bc25cadf-543e-8442-a72a-6c11a851d3cf
    question_text: Show me the breakers that are associated with KRISTIAN300L1.
    reference_steps:
    - - args:
          query: KRISTIAN300L1
        name: iri_discovery
        output: urn:uuid:bc25cadf-543e-8442-a72a-6c11a851d3cf
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:bc25cadf-543e-8442-a72a-6c11a851d3cf>
            .

            <urn:uuid:bc25cadf-543e-8442-a72a-6c11a851d3cf> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2973c36e-3d17-284c-a950-b86b9496acca"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_956e31892498f689199829ba86a903f9
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:95f000f9-9c2b-4c4d-9ce5-6ced7a695b08
    question_text: Can you identify all breakers contained within 95f000f9-9c2b-4c4d-9ce5-6ced7a695b08?
    reference_steps:
    - - args:
          query: 95f000f9-9c2b-4c4d-9ce5-6ced7a695b08
        name: iri_discovery
        output: urn:uuid:95f000f9-9c2b-4c4d-9ce5-6ced7a695b08
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPartTransitive <urn:uuid:95f000f9-9c2b-4c4d-9ce5-6ced7a695b08>
            .

            <urn:uuid:95f000f9-9c2b-4c4d-9ce5-6ced7a695b08> a cim:Bay ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:373c4779-0905-d34c-bbc9-d200f848cbd9"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7cc994ab-ddb9-8a4a-bbda-e91af59a06d9"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPartTransitive {$ObjectIdentity(0, cim:Bay)} .

    {$ObjectIdentity(0, cim:Bay)} a cim:Bay ;

    .'
  template_id: template_list_ac4fccfbaebf701f07e644f5c9607ed1
- description: A graph pattern which lists all values for breaker limited by parameters
    for terminal (https://cim.ucaiug.io/rules#Equipment.Terminals) and by filter properties
    none.
  filters: []
  name: List breaker by parameters terminal and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    type: https://cim.ucaiug.io/ns#Terminal
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:Terminal)?
  - Can you identify breakers associated with $ObjectIdentity(0, cim:Terminal)?
  - Show me the breakers that include $ObjectIdentity(0, cim:Terminal) as one of their
    terminals.
  - What are the breakers linked through the terminal $ObjectIdentity(0, cim:Terminal)?
  - List all circuit breakers that are connected via $ObjectIdentity(0, cim:Terminal).
  questions:
  - id: question_58996acaf600f0571d32d24e1ee73aca
    parameter_bindings:
      $ObjectIdentity(0, cim:Terminal): urn:uuid:83bf6035-97b6-4433-b5f9-bb455444a983
    question_text: Show me the breakers that include T2 ENGENE 22 N1E as one of their
      terminals.
    reference_steps:
    - - args:
          query: T2 ENGENE 22 N1E
        name: iri_discovery
        output: urn:uuid:83bf6035-97b6-4433-b5f9-bb455444a983
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals <urn:uuid:83bf6035-97b6-4433-b5f9-bb455444a983>
            .

            <urn:uuid:83bf6035-97b6-4433-b5f9-bb455444a983> a cim:Terminal ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_f6c0cc56f825e5fe26f47b442784b26e
    parameter_bindings:
      $ObjectIdentity(0, cim:Terminal): urn:uuid:f723530d-ae1e-df4f-9c7f-21e42da147d6
    question_text: Can you identify breakers associated with KRISTIAN300G1  BB_S T1?
    reference_steps:
    - - args:
          query: KRISTIAN300G1  BB_S T1
        name: iri_discovery
        output: urn:uuid:f723530d-ae1e-df4f-9c7f-21e42da147d6
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals <urn:uuid:f723530d-ae1e-df4f-9c7f-21e42da147d6>
            .

            <urn:uuid:f723530d-ae1e-df4f-9c7f-21e42da147d6> a cim:Terminal ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:bf62264e-c8f3-8f43-95c9-570f3337479c"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_64ed22e8f2af299e1fb5850e6ca42052
    parameter_bindings:
      $ObjectIdentity(0, cim:Terminal): urn:uuid:79887cf1-6c94-3f4f-a1f8-7ddef866d55f
    question_text: What are the breakers linked through the terminal KRISTIAN300KV1
      BB_S T2?
    reference_steps:
    - - args:
          query: KRISTIAN300KV1 BB_S T2
        name: iri_discovery
        output: urn:uuid:79887cf1-6c94-3f4f-a1f8-7ddef866d55f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals <urn:uuid:79887cf1-6c94-3f4f-a1f8-7ddef866d55f>
            .

            <urn:uuid:79887cf1-6c94-3f4f-a1f8-7ddef866d55f> a cim:Terminal ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:0169b8e7-c05b-3640-b55e-22b40081ca21"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_d51bc0e9e32c98a11a404bb36335d233
    parameter_bindings:
      $ObjectIdentity(0, cim:Terminal): urn:uuid:ad970e05-69d9-5340-9dbd-ce6a9a2e0996
    question_text: Can you identify breakers associated with ad970e05-69d9-5340-9dbd-ce6a9a2e0996?
    reference_steps:
    - - args:
          query: ad970e05-69d9-5340-9dbd-ce6a9a2e0996
        name: iri_discovery
        output: urn:uuid:ad970e05-69d9-5340-9dbd-ce6a9a2e0996
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals <urn:uuid:ad970e05-69d9-5340-9dbd-ce6a9a2e0996>
            .

            <urn:uuid:ad970e05-69d9-5340-9dbd-ce6a9a2e0996> a cim:Terminal ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:cefef4c4-1b45-af4b-8e13-275e0c9ffe27"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_1caf6ca7d7d4fd06ecf7a4f58d152bbc
    parameter_bindings:
      $ObjectIdentity(0, cim:Terminal): urn:uuid:8d1b7879-ba70-459c-a9ab-f5cc16245e92
    question_text: Can you identify breakers associated with 8d1b7879-ba70-459c-a9ab-f5cc16245e92?
    reference_steps:
    - - args:
          query: 8d1b7879-ba70-459c-a9ab-f5cc16245e92
        name: iri_discovery
        output: urn:uuid:8d1b7879-ba70-459c-a9ab-f5cc16245e92
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals <urn:uuid:8d1b7879-ba70-459c-a9ab-f5cc16245e92>
            .

            <urn:uuid:8d1b7879-ba70-459c-a9ab-f5cc16245e92> a cim:Terminal ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals {$ObjectIdentity(0, cim:Terminal)} .

    {$ObjectIdentity(0, cim:Terminal)} a cim:Terminal ;

    .'
  template_id: template_list_6bbcd3883274005c06f084900710145a
- description: A graph pattern which lists all values for breaker limited by parameters
    for breaker (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters breaker and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#Breaker
  paraphrases:
  - Which circuit breakers are directly connected to $ObjectIdentity(0, cim:Breaker)?
  - Can you list all the breakers that establish a connection with $ObjectIdentity(0,
    cim:Breaker)?
  - What are the circuit breakers that are linked to $ObjectIdentity(0, cim:Breaker)?
  - I need to find the breakers that have a direct connection with $ObjectIdentity(0,
    cim:Breaker).
  - Show me all circuit breakers that are connected to $ObjectIdentity(0, cim:Breaker).
  questions:
  - id: question_091cabdcd207e496cc60a9448a924b97
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387
    question_text: I need to find the breakers that have a direct connection with
      f7d8e580-296d-4c2a-b989-1eb4db7af387.
    reference_steps:
    - - args:
          query: f7d8e580-296d-4c2a-b989-1eb4db7af387
        name: iri_discovery
        output: urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387> .

            <urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_0ff165b5b56daba2b509eceab35d8cba
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e
    question_text: Which circuit breakers are directly connected to 0d415b1b-b4da-f34f-aafb-802c77edce8e?
    reference_steps:
    - - args:
          query: 0d415b1b-b4da-f34f-aafb-802c77edce8e
        name: iri_discovery
        output: urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e> .

            <urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b209ada6-1835-1540-8868-1cd5e65016c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:316f39b6-0fed-ea41-87a1-0f5119e136c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2384f146-deb2-c046-817c-6322a5381b9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:13588bcf-c30d-7a49-beaa-67fcce61d305"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cefef4c4-1b45-af4b-8e13-275e0c9ffe27"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7cc994ab-ddb9-8a4a-bbda-e91af59a06d9"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_95826046a27b1d74390332703d769599
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9
    question_text: Can you list all the breakers that establish a connection with
      3dd4a1cf-86dc-9649-8120-e519d7986be9?
    reference_steps:
    - - args:
          query: 3dd4a1cf-86dc-9649-8120-e519d7986be9
        name: iri_discovery
        output: urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9> .

            <urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:f56758a8-12a0-7648-b04b-f32ec3247e3b"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:5ae8b25f-24cc-e34b-b238-2aea59d516c5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_c58e3f2e0e23d832be23f5ce5a9f3c43
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe
    question_text: Show me all circuit breakers that are connected to ENGENE 22 NE1
      E.
    reference_steps:
    - - args:
          query: ENGENE 22 NE1 E
        name: iri_discovery
        output: urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe> .

            <urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_e767bf297abb5e81633a9fc22c88050f
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c
    question_text: Which circuit breakers are directly connected to 38cd8874-fb01-462c-8c85-95dac14fee9c?
    reference_steps:
    - - args:
          query: 38cd8874-fb01-462c-8c85-95dac14fee9c
        name: iri_discovery
        output: urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c> .

            <urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:Breaker)} .

    {$ObjectIdentity(0, cim:Breaker)} a cim:Breaker ;

    .'
  template_id: template_list_d55820f63ba5dfc8e1ccd9d85711df32
- description: A graph pattern which lists all values for breaker limited by parameters
    for busbarsection (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters busbarsection and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#BusbarSection
  paraphrases:
  - Which breakers are connected to the busbar section $ObjectIdentity(0, cim:BusbarSection)?
  - Can you list all breakers that have a direct connection to $ObjectIdentity(0,
    cim:BusbarSection)?
  - What are the circuit breakers linked to the busbar section identified as $ObjectIdentity(0,
    cim:BusbarSection)?
  - Show me all breakers that are associated with the busbar section $ObjectIdentity(0,
    cim:BusbarSection).
  - Find the breakers that are connected to $ObjectIdentity(0, cim:BusbarSection).
  questions:
  - id: question_301265a3978a9f042011b86999aafaf8
    parameter_bindings:
      $ObjectIdentity(0, cim:BusbarSection): urn:uuid:2dd90195-bdfb-11e5-94fa-c8f73332c8f4
    question_text: Find the breakers that are connected to 2dd90195-bdfb-11e5-94fa-c8f73332c8f4.
    reference_steps:
    - - args:
          query: 2dd90195-bdfb-11e5-94fa-c8f73332c8f4
        name: iri_discovery
        output: urn:uuid:2dd90195-bdfb-11e5-94fa-c8f73332c8f4
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:2dd90195-bdfb-11e5-94fa-c8f73332c8f4> .

            <urn:uuid:2dd90195-bdfb-11e5-94fa-c8f73332c8f4> a cim:BusbarSection ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b209ada6-1835-1540-8868-1cd5e65016c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:316f39b6-0fed-ea41-87a1-0f5119e136c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:2384f146-deb2-c046-817c-6322a5381b9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:13588bcf-c30d-7a49-beaa-67fcce61d305"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cefef4c4-1b45-af4b-8e13-275e0c9ffe27"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7cc994ab-ddb9-8a4a-bbda-e91af59a06d9"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_4ca77f5142b114e81a5fbc9240753f99
    parameter_bindings:
      $ObjectIdentity(0, cim:BusbarSection): urn:uuid:b8666715-5047-5d4d-a882-85fcf5c727b5
    question_text: Which breakers are connected to the busbar section ARENDAL 300
      B?
    reference_steps:
    - - args:
          query: ARENDAL 300 B
        name: iri_discovery
        output: urn:uuid:b8666715-5047-5d4d-a882-85fcf5c727b5
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:b8666715-5047-5d4d-a882-85fcf5c727b5> .

            <urn:uuid:b8666715-5047-5d4d-a882-85fcf5c727b5> a cim:BusbarSection ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:0a46da9f-1326-254e-8a3b-649a431f6625"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:cbd34307-2d45-ae47-872a-516888952750"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:7113e099-7f24-6a47-9fa2-94a2d57d6c9b"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_e73fbdf340ba2ecaef6d8f95c097caab
    parameter_bindings:
      $ObjectIdentity(0, cim:BusbarSection): urn:uuid:4c23e857-2e4b-4b7c-9c47-5a9190e5afd4
    question_text: What are the circuit breakers linked to the busbar section identified
      as 4c23e857-2e4b-4b7c-9c47-5a9190e5afd4?
    reference_steps:
    - - args:
          query: 4c23e857-2e4b-4b7c-9c47-5a9190e5afd4
        name: iri_discovery
        output: urn:uuid:4c23e857-2e4b-4b7c-9c47-5a9190e5afd4
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:4c23e857-2e4b-4b7c-9c47-5a9190e5afd4> .

            <urn:uuid:4c23e857-2e4b-4b7c-9c47-5a9190e5afd4> a cim:BusbarSection ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_796a7b504dbc9ab69e6db7d5228a13d9
    parameter_bindings:
      $ObjectIdentity(0, cim:BusbarSection): urn:uuid:84d18a79-be9c-4b68-be21-36c3d7d40c58
    question_text: Find the breakers that are connected to 84d18a79-be9c-4b68-be21-36c3d7d40c58.
    reference_steps:
    - - args:
          query: 84d18a79-be9c-4b68-be21-36c3d7d40c58
        name: iri_discovery
        output: urn:uuid:84d18a79-be9c-4b68-be21-36c3d7d40c58
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:84d18a79-be9c-4b68-be21-36c3d7d40c58> .

            <urn:uuid:84d18a79-be9c-4b68-be21-36c3d7d40c58> a cim:BusbarSection ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_9cc114f01991125a2eb9469e6452458d
    parameter_bindings:
      $ObjectIdentity(0, cim:BusbarSection): urn:uuid:8cc7031f-def2-49b7-97a9-43d3c3c15789
    question_text: Find the breakers that are connected to 8cc7031f-def2-49b7-97a9-43d3c3c15789.
    reference_steps:
    - - args:
          query: 8cc7031f-def2-49b7-97a9-43d3c3c15789
        name: iri_discovery
        output: urn:uuid:8cc7031f-def2-49b7-97a9-43d3c3c15789
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:8cc7031f-def2-49b7-97a9-43d3c3c15789> .

            <urn:uuid:8cc7031f-def2-49b7-97a9-43d3c3c15789> a cim:BusbarSection ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:BusbarSection)} .

    {$ObjectIdentity(0, cim:BusbarSection)} a cim:BusbarSection ;

    .'
  template_id: template_list_2e56cc2600ce8f58fad8e8bcb86fc565
- description: A graph pattern which lists all values for breaker limited by parameters
    for disconnector (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters disconnector and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#Disconnector
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:Disconnector)?
  - Can you identify the breakers that are linked to $ObjectIdentity(0, cim:Disconnector)?
  - What circuit breakers have a connection to $ObjectIdentity(0, cim:Disconnector)?
  - Show me all breakers that are associated with $ObjectIdentity(0, cim:Disconnector).
  - List the circuit breakers that are directly connected to $ObjectIdentity(0, cim:Disconnector).
  questions:
  - id: question_fd9318e62c40d6dce2ee320f2e3759a6
    parameter_bindings:
      $ObjectIdentity(0, cim:Disconnector): urn:uuid:57b1462c-259c-426b-86f9-f6f6f2af9c5c
    question_text: List the circuit breakers that are directly connected to ENGENE
      22 NT1 AD_S.
    reference_steps:
    - - args:
          query: ENGENE 22 NT1 AD_S
        name: iri_discovery
        output: urn:uuid:57b1462c-259c-426b-86f9-f6f6f2af9c5c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:57b1462c-259c-426b-86f9-f6f6f2af9c5c> .

            <urn:uuid:57b1462c-259c-426b-86f9-f6f6f2af9c5c> a cim:Disconnector ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:808643b7-4e47-4faa-b906-999d0f1fe32b"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_ae988c5450cca06bda4691bc8f0c6350
    parameter_bindings:
      $ObjectIdentity(0, cim:Disconnector): urn:uuid:a8afc199-8a20-41d8-8ada-5261202610eb
    question_text: Can you identify the breakers that are linked to ARENDAL 132 T1
      LD_S?
    reference_steps:
    - - args:
          query: ARENDAL 132 T1 LD_S
        name: iri_discovery
        output: urn:uuid:a8afc199-8a20-41d8-8ada-5261202610eb
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:a8afc199-8a20-41d8-8ada-5261202610eb> .

            <urn:uuid:a8afc199-8a20-41d8-8ada-5261202610eb> a cim:Disconnector ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:48668646-105a-490d-aaad-3259b852aa23"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_862df09d05966a19d2e69920b8ba634f
    parameter_bindings:
      $ObjectIdentity(0, cim:Disconnector): urn:uuid:b36c1e1d-ec67-7b48-9a2f-ecbf617ae59f
    question_text: List the circuit breakers that are directly connected to b36c1e1d-ec67-7b48-9a2f-ecbf617ae59f.
    reference_steps:
    - - args:
          query: b36c1e1d-ec67-7b48-9a2f-ecbf617ae59f
        name: iri_discovery
        output: urn:uuid:b36c1e1d-ec67-7b48-9a2f-ecbf617ae59f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:b36c1e1d-ec67-7b48-9a2f-ecbf617ae59f> .

            <urn:uuid:b36c1e1d-ec67-7b48-9a2f-ecbf617ae59f> a cim:Disconnector ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:7113e099-7f24-6a47-9fa2-94a2d57d6c9b"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_ed23f02cbea747c0dcd4c2fc8fb1127a
    parameter_bindings:
      $ObjectIdentity(0, cim:Disconnector): urn:uuid:75f12fd9-2057-4b79-9f19-73736a0f2a6d
    question_text: What circuit breakers have a connection to 75f12fd9-2057-4b79-9f19-73736a0f2a6d?
    reference_steps:
    - - args:
          query: 75f12fd9-2057-4b79-9f19-73736a0f2a6d
        name: iri_discovery
        output: urn:uuid:75f12fd9-2057-4b79-9f19-73736a0f2a6d
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:75f12fd9-2057-4b79-9f19-73736a0f2a6d> .

            <urn:uuid:75f12fd9-2057-4b79-9f19-73736a0f2a6d> a cim:Disconnector ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2fb546e7-9e06-4356-a3ad-7e3756c34f6a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_df02acc04c136857fec41bb9fbfbb701
    parameter_bindings:
      $ObjectIdentity(0, cim:Disconnector): urn:uuid:c986d524-47e9-9e4d-b635-64386c9be9a1
    question_text: List the circuit breakers that are directly connected to c986d524-47e9-9e4d-b635-64386c9be9a1.
    reference_steps:
    - - args:
          query: c986d524-47e9-9e4d-b635-64386c9be9a1
        name: iri_discovery
        output: urn:uuid:c986d524-47e9-9e4d-b635-64386c9be9a1
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:c986d524-47e9-9e4d-b635-64386c9be9a1> .

            <urn:uuid:c986d524-47e9-9e4d-b635-64386c9be9a1> a cim:Disconnector ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:Disconnector)} .

    {$ObjectIdentity(0, cim:Disconnector)} a cim:Disconnector ;

    .'
  template_id: template_list_dd01a08436304cf8f791a99df08b9032
- description: A graph pattern which lists all values for breaker limited by parameters
    for powertransformer (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters powertransformer and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#PowerTransformer
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:PowerTransformer)?
  - Can you identify all breakers that establish a connection with $ObjectIdentity(0,
    cim:PowerTransformer)?
  - What are the breakers linked to $ObjectIdentity(0, cim:PowerTransformer)?
  - List all breakers that have a connection to $ObjectIdentity(0, cim:PowerTransformer).
  - Show me the breakers that are electrically connected to $ObjectIdentity(0, cim:PowerTransformer).
  questions:
  - id: question_c08fcd9c04237156893b1ea88c894382
    parameter_bindings:
      $ObjectIdentity(0, cim:PowerTransformer): urn:uuid:f1769e1e-9aeb-11e5-91da-b8763fd99c5f
    question_text: Show me the breakers that are electrically connected to ARENDAL
      T1.
    reference_steps:
    - - args:
          query: ARENDAL T1
        name: iri_discovery
        output: urn:uuid:f1769e1e-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:f1769e1e-9aeb-11e5-91da-b8763fd99c5f> .

            <urn:uuid:f1769e1e-9aeb-11e5-91da-b8763fd99c5f> a cim:PowerTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:5ae8b25f-24cc-e34b-b238-2aea59d516c5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_f019836c0faa6dd0c093ae41a7a414d2
    parameter_bindings:
      $ObjectIdentity(0, cim:PowerTransformer): urn:uuid:681a2fdd-5a55-11eb-a658-74e5f963e191
    question_text: What are the breakers linked to 681a2fdd-5a55-11eb-a658-74e5f963e191?
    reference_steps:
    - - args:
          query: 681a2fdd-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a2fdd-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:681a2fdd-5a55-11eb-a658-74e5f963e191> .

            <urn:uuid:681a2fdd-5a55-11eb-a658-74e5f963e191> a cim:PowerTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:PowerTransformer)} .

    {$ObjectIdentity(0, cim:PowerTransformer)} a cim:PowerTransformer ;

    .'
  template_id: template_list_61a7a044f68645ae5300b95a8cbc58ec
- description: A graph pattern which lists all values for breaker limited by parameters
    for aclinesegment (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters aclinesegment and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#ACLineSegment
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:ACLineSegment)?
  - Can you identify the breakers associated with $ObjectIdentity(0, cim:ACLineSegment)?
  - List all circuit breakers that are linked to $ObjectIdentity(0, cim:ACLineSegment).
  - Show me the breakers that are connected to the AC line segment $ObjectIdentity(0,
    cim:ACLineSegment).
  - What are the breakers interfacing with $ObjectIdentity(0, cim:ACLineSegment)?
  questions:
  - id: question_66924c0e0073d29d8640b4d488862cbd
    parameter_bindings:
      $ObjectIdentity(0, cim:ACLineSegment): urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c
    question_text: Show me the breakers that are connected to the AC line segment
      420ARENDAL-SANDEFJORD.
    reference_steps:
    - - args:
          query: 420ARENDAL-SANDEFJORD
        name: iri_discovery
        output: urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c> .

            <urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c> a cim:ACLineSegment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_176fc45d595a33b6dfa0ebf4a49d54c9
    parameter_bindings:
      $ObjectIdentity(0, cim:ACLineSegment): urn:uuid:681a2a13-5a55-11eb-a658-74e5f963e191
    question_text: Can you identify the breakers associated with 22 ENGENE-T1 ACLS
      1 2?
    reference_steps:
    - - args:
          query: 22 ENGENE-T1 ACLS 1 2
        name: iri_discovery
        output: urn:uuid:681a2a13-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:681a2a13-5a55-11eb-a658-74e5f963e191> .

            <urn:uuid:681a2a13-5a55-11eb-a658-74e5f963e191> a cim:ACLineSegment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b16294fe-269c-4f3d-b6af-4bc473c663d6"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_3aa0a285875a94cba1c1ae57adc80087
    parameter_bindings:
      $ObjectIdentity(0, cim:ACLineSegment): urn:uuid:ab5aff23-cc0c-40a9-ab1b-7c113822358e
    question_text: List all circuit breakers that are linked to 023 ZT1-EFC ACLS 2.
    reference_steps:
    - - args:
          query: 023 ZT1-EFC ACLS 2
        name: iri_discovery
        output: urn:uuid:ab5aff23-cc0c-40a9-ab1b-7c113822358e
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:ab5aff23-cc0c-40a9-ab1b-7c113822358e> .

            <urn:uuid:ab5aff23-cc0c-40a9-ab1b-7c113822358e> a cim:ACLineSegment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_c9cd535ec1a8951ccdf47b4fa9860a4b
    parameter_bindings:
      $ObjectIdentity(0, cim:ACLineSegment): urn:uuid:681a26db-5a55-11eb-a658-74e5f963e191
    question_text: What are the breakers interfacing with 681a26db-5a55-11eb-a658-74e5f963e191?
    reference_steps:
    - - args:
          query: 681a26db-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a26db-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:681a26db-5a55-11eb-a658-74e5f963e191> .

            <urn:uuid:681a26db-5a55-11eb-a658-74e5f963e191> a cim:ACLineSegment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_22362f7328f828260a42b9ebb2927a9d
    parameter_bindings:
      $ObjectIdentity(0, cim:ACLineSegment): urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191
    question_text: Show me the breakers that are connected to the AC line segment
      22 ENGENE-NEDENES ACLS 1.
    reference_steps:
    - - args:
          query: 22 ENGENE-NEDENES ACLS 1
        name: iri_discovery
        output: urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191> .

            <urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191> a cim:ACLineSegment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:ACLineSegment)} .

    {$ObjectIdentity(0, cim:ACLineSegment)} a cim:ACLineSegment ;

    .'
  template_id: template_list_31302026fdaa422d88a5c0fd86393e83
- description: A graph pattern which lists all values for breaker limited by parameters
    for feature (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters feature and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: http://www.opengis.net/ont/geosparql#Feature
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, geo:Feature)?
  - Can you identify all breakers that are linked to $ObjectIdentity(0, geo:Feature)?
  - What are the circuit breakers associated with $ObjectIdentity(0, geo:Feature)?
  - List all breakers that maintain a connection to $ObjectIdentity(0, geo:Feature).
  - What electrical breakers have a connection to $ObjectIdentity(0, geo:Feature)?
  questions:
  - id: question_9b13c5508aa786fc98a559df3746460f
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c
    question_text: List all breakers that maintain a connection to 4d89c650-5698-2e43-849b-ff65a7251f9c.
    reference_steps:
    - - args:
          query: 4d89c650-5698-2e43-849b-ff65a7251f9c
        name: iri_discovery
        output: urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c> .

            <urn:uuid:4d89c650-5698-2e43-849b-ff65a7251f9c> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_2cff8998b5535ab9f418d6776759f25d
    parameter_bindings:
      $ObjectIdentity(0, geo:Feature): urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191
    question_text: What are the circuit breakers associated with 92d33be4-7034-11eb-a65a-74e5f963e191?
    reference_steps:
    - - args:
          query: 92d33be4-7034-11eb-a65a-74e5f963e191
        name: iri_discovery
        output: urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191> .

            <urn:uuid:92d33be4-7034-11eb-a65a-74e5f963e191> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, geo:Feature)} .

    {$ObjectIdentity(0, geo:Feature)} a geo:Feature ;

    .'
  template_id: template_list_6c16e245e945bed5992b8eacbaa07b8d
- description: A graph pattern which lists all values for breaker limited by parameters
    for synchronousmachine (https://cim.ucaiug.io/rules#connectedTo) and by filter
    properties none.
  filters: []
  name: List breaker by parameters synchronousmachine and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#SynchronousMachine
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:SynchronousMachine)?
  - Can you identify the breakers that establish a connection to $ObjectIdentity(0,
    cim:SynchronousMachine)?
  - What are the breakers linked to $ObjectIdentity(0, cim:SynchronousMachine)?
  - Find all circuit breakers that are connected to $ObjectIdentity(0, cim:SynchronousMachine).
  - Show me the breakers that have a direct connection to $ObjectIdentity(0, cim:SynchronousMachine).
  questions:
  - id: question_59fe6765566442ceaac386d4db352b5c
    parameter_bindings:
      $ObjectIdentity(0, cim:SynchronousMachine): urn:uuid:33666962-c2f9-4f6b-af5a-2ef1982ac282
    question_text: Which breakers are connected to 33666962-c2f9-4f6b-af5a-2ef1982ac282?
    reference_steps:
    - - args:
          query: 33666962-c2f9-4f6b-af5a-2ef1982ac282
        name: iri_discovery
        output: urn:uuid:33666962-c2f9-4f6b-af5a-2ef1982ac282
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:33666962-c2f9-4f6b-af5a-2ef1982ac282> .

            <urn:uuid:33666962-c2f9-4f6b-af5a-2ef1982ac282> a cim:SynchronousMachine
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:SynchronousMachine)} .

    {$ObjectIdentity(0, cim:SynchronousMachine)} a cim:SynchronousMachine ;

    .'
  template_id: template_list_364ad9c741fbc5a9d3b0692570a19d10
- description: A graph pattern which lists all values for breaker limited by parameters
    for equivalentinjection (https://cim.ucaiug.io/rules#connectedTo) and by filter
    properties none.
  filters: []
  name: List breaker by parameters equivalentinjection and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#EquivalentInjection
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:EquivalentInjection)?
  - Can you identify all breakers that interact with $ObjectIdentity(0, cim:EquivalentInjection)?
  - Find all circuit breakers that are linked to the equivalent injection $ObjectIdentity(0,
    cim:EquivalentInjection).
  - What breakers establish a connection with $ObjectIdentity(0, cim:EquivalentInjection)?
  - Show me all breakers that are directly connected to $ObjectIdentity(0, cim:EquivalentInjection).
  questions:
  - id: question_5df83a51e65dd2b0b7c346c7083b85eb
    parameter_bindings:
      $ObjectIdentity(0, cim:EquivalentInjection): urn:uuid:ed8865cf-8b36-42ce-acdc-0627b5f55802
    question_text: Which breakers are connected to ed8865cf-8b36-42ce-acdc-0627b5f55802?
    reference_steps:
    - - args:
          query: ed8865cf-8b36-42ce-acdc-0627b5f55802
        name: iri_discovery
        output: urn:uuid:ed8865cf-8b36-42ce-acdc-0627b5f55802
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:ed8865cf-8b36-42ce-acdc-0627b5f55802> .

            <urn:uuid:ed8865cf-8b36-42ce-acdc-0627b5f55802> a cim:EquivalentInjection
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:368340e1-464b-814b-9bac-9b70b93dde72"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:EquivalentInjection)} .

    {$ObjectIdentity(0, cim:EquivalentInjection)} a cim:EquivalentInjection ;

    .'
  template_id: template_list_73558d9d865f05c0e752218d7a91c69d
- description: A graph pattern which lists all values for breaker limited by parameters
    for linearshuntcompensator (https://cim.ucaiug.io/rules#connectedTo) and by filter
    properties none.
  filters: []
  name: List breaker by parameters linearshuntcompensator and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#LinearShuntCompensator
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:LinearShuntCompensator)?
  - Can you identify the breakers that are linked to $ObjectIdentity(0, cim:LinearShuntCompensator)?
  - What are the circuit breakers that establish a connection to $ObjectIdentity(0,
    cim:LinearShuntCompensator)?
  - Find all breakers connected to $ObjectIdentity(0, cim:LinearShuntCompensator).
  - Which breakers are associated with $ObjectIdentity(0, cim:LinearShuntCompensator)
    through a direct connection?
  questions:
  - id: question_b45c80c428f83c00243049332226f085
    parameter_bindings:
      $ObjectIdentity(0, cim:LinearShuntCompensator): urn:uuid:2dd90408-bdfb-11e5-94fa-c8f73332c8f4
    question_text: Which circuit breakers are connected to ARENDAL 300 LSC1?
    reference_steps:
    - - args:
          query: ARENDAL 300 LSC1
        name: iri_discovery
        output: urn:uuid:2dd90408-bdfb-11e5-94fa-c8f73332c8f4
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:2dd90408-bdfb-11e5-94fa-c8f73332c8f4> .

            <urn:uuid:2dd90408-bdfb-11e5-94fa-c8f73332c8f4> a cim:LinearShuntCompensator
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:3dd4a1cf-86dc-9649-8120-e519d7986be9"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_c6697f0d1f18a3f2408437f5e174bd3f
    parameter_bindings:
      $ObjectIdentity(0, cim:LinearShuntCompensator): urn:uuid:681a323d-5a55-11eb-a658-74e5f963e191
    question_text: Can you identify the breakers that are linked to 681a323d-5a55-11eb-a658-74e5f963e191?
    reference_steps:
    - - args:
          query: 681a323d-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a323d-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:681a323d-5a55-11eb-a658-74e5f963e191> .

            <urn:uuid:681a323d-5a55-11eb-a658-74e5f963e191> a cim:LinearShuntCompensator
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:f7d8e580-296d-4c2a-b989-1eb4db7af387"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:LinearShuntCompensator)} .

    {$ObjectIdentity(0, cim:LinearShuntCompensator)} a cim:LinearShuntCompensator
    ;

    .'
  template_id: template_list_eb7067f8db2d860440a436e23ba3f295
- description: A graph pattern which lists all values for breaker limited by parameters
    for fuse (https://cim.ucaiug.io/rules#connectedTo) and by filter properties none.
  filters: []
  name: List breaker by parameters fuse and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#Fuse
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:Fuse)?
  - Can you find all breakers that establish a connection with $ObjectIdentity(0,
    cim:Fuse)?
  - I need to identify the breakers that are linked to $ObjectIdentity(0, cim:Fuse).
  - What breakers have a direct connection to $ObjectIdentity(0, cim:Fuse)?
  - Show me all breakers that are associated with $ObjectIdentity(0, cim:Fuse).
  questions:
  - id: question_a7f0a2ffb2b2d009547893c591189ba4
    parameter_bindings:
      $ObjectIdentity(0, cim:Fuse): urn:uuid:7c60d1fd-fe74-4094-89f7-2d3949deaa3c
    question_text: Can you find all breakers that establish a connection with 7c60d1fd-fe74-4094-89f7-2d3949deaa3c?
    reference_steps:
    - - args:
          query: 7c60d1fd-fe74-4094-89f7-2d3949deaa3c
        name: iri_discovery
        output: urn:uuid:7c60d1fd-fe74-4094-89f7-2d3949deaa3c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:7c60d1fd-fe74-4094-89f7-2d3949deaa3c> .

            <urn:uuid:7c60d1fd-fe74-4094-89f7-2d3949deaa3c> a cim:Fuse ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_6c60925ed0230d6b5e84b9c8f8425b15
    parameter_bindings:
      $ObjectIdentity(0, cim:Fuse): urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0
    question_text: Which breakers are connected to TELEMA2 04 Br12?
    reference_steps:
    - - args:
          query: TELEMA2 04 Br12
        name: iri_discovery
        output: urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0> .

            <urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0> a cim:Fuse ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_81d3f189836a93a7ff87bccaf7aef3bd
    parameter_bindings:
      $ObjectIdentity(0, cim:Fuse): urn:uuid:7e432a85-77b4-44f2-ae98-07134a1a5087
    question_text: What breakers have a direct connection to TELEMA2 04 Fu13?
    reference_steps:
    - - args:
          query: TELEMA2 04 Fu13
        name: iri_discovery
        output: urn:uuid:7e432a85-77b4-44f2-ae98-07134a1a5087
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:7e432a85-77b4-44f2-ae98-07134a1a5087> .

            <urn:uuid:7e432a85-77b4-44f2-ae98-07134a1a5087> a cim:Fuse ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_a582684059b1cec4e14cc50fa107d9a2
    parameter_bindings:
      $ObjectIdentity(0, cim:Fuse): urn:uuid:f64ec489-a926-4f4f-877b-102d4cd7fd2b
    question_text: Show me all breakers that are associated with TELEMA2 04 Fu21.
    reference_steps:
    - - args:
          query: TELEMA2 04 Fu21
        name: iri_discovery
        output: urn:uuid:f64ec489-a926-4f4f-877b-102d4cd7fd2b
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:f64ec489-a926-4f4f-877b-102d4cd7fd2b> .

            <urn:uuid:f64ec489-a926-4f4f-877b-102d4cd7fd2b> a cim:Fuse ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_928ebe97565fc6b7c6c06cb4222b2ca2
    parameter_bindings:
      $ObjectIdentity(0, cim:Fuse): urn:uuid:9a717362-88c3-4b20-85a7-9adfb67c63ca
    question_text: I need to identify the breakers that are linked to 9a717362-88c3-4b20-85a7-9adfb67c63ca.
    reference_steps:
    - - args:
          query: 9a717362-88c3-4b20-85a7-9adfb67c63ca
        name: iri_discovery
        output: urn:uuid:9a717362-88c3-4b20-85a7-9adfb67c63ca
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:9a717362-88c3-4b20-85a7-9adfb67c63ca> .

            <urn:uuid:9a717362-88c3-4b20-85a7-9adfb67c63ca> a cim:Fuse ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:Fuse)} .

    {$ObjectIdentity(0, cim:Fuse)} a cim:Fuse ;

    .'
  template_id: template_list_790439965b35f9810890c4b0d58291ce
- description: A graph pattern which lists all values for breaker limited by parameters
    for potentialtransformer (https://cim.ucaiug.io/rules#connectedTo) and by filter
    properties none.
  filters: []
  name: List breaker by parameters potentialtransformer and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#PotentialTransformer
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:PotentialTransformer)?
  - Can you identify all breakers that are linked to $ObjectIdentity(0, cim:PotentialTransformer)?
  - List the breakers that establish a connection with $ObjectIdentity(0, cim:PotentialTransformer).
  - What are the circuit breakers that are associated with $ObjectIdentity(0, cim:PotentialTransformer)?
  - Show me all breakers connected to the potential transformer $ObjectIdentity(0,
    cim:PotentialTransformer).
  questions:
  - id: question_0802b2d2eccebbe286eba83fabc4772d
    parameter_bindings:
      $ObjectIdentity(0, cim:PotentialTransformer): urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672
    question_text: Can you identify all breakers that are linked to fd11bf7f-138b-4a1b-802c-25262b7b8672?
    reference_steps:
    - - args:
          query: fd11bf7f-138b-4a1b-802c-25262b7b8672
        name: iri_discovery
        output: urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672> .

            <urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672> a cim:PotentialTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_b20bbcdd48337e812d057abe9de6a14e
    parameter_bindings:
      $ObjectIdentity(0, cim:PotentialTransformer): urn:uuid:74936f6f-296e-44db-b772-1d522f317069
    question_text: List the breakers that establish a connection with ENGENE VT3.
    reference_steps:
    - - args:
          query: ENGENE VT3
        name: iri_discovery
        output: urn:uuid:74936f6f-296e-44db-b772-1d522f317069
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:74936f6f-296e-44db-b772-1d522f317069> .

            <urn:uuid:74936f6f-296e-44db-b772-1d522f317069> a cim:PotentialTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_7c066db2bc4499c3801e2566aaaaa98a
    parameter_bindings:
      $ObjectIdentity(0, cim:PotentialTransformer): urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c
    question_text: Can you identify all breakers that are linked to 03f7a245-aeca-48ba-af07-58419fb9b77c?
    reference_steps:
    - - args:
          query: 03f7a245-aeca-48ba-af07-58419fb9b77c
        name: iri_discovery
        output: urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c> .

            <urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c> a cim:PotentialTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:PotentialTransformer)} .

    {$ObjectIdentity(0, cim:PotentialTransformer)} a cim:PotentialTransformer ;

    .'
  template_id: template_list_044419c319e6c63ae9cb411f037ed096
- description: A graph pattern which lists all values for breaker limited by parameters
    for currenttransformer (https://cim.ucaiug.io/rules#connectedTo) and by filter
    properties none.
  filters: []
  name: List breaker by parameters currenttransformer and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#CurrentTransformer
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:CurrentTransformer)?
  - Can you list all breakers that have a connection to $ObjectIdentity(0, cim:CurrentTransformer)?
  - What circuit breakers are linked to $ObjectIdentity(0, cim:CurrentTransformer)?
  - I need to find all breakers connected to the current transformer $ObjectIdentity(0,
    cim:CurrentTransformer).
  - Show me the breakers that are electrically associated with $ObjectIdentity(0,
    cim:CurrentTransformer).
  questions:
  - id: question_31c59e2f81453d8cce42f6f407b84fba
    parameter_bindings:
      $ObjectIdentity(0, cim:CurrentTransformer): urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541
    question_text: What circuit breakers are linked to ENGENE CT3?
    reference_steps:
    - - args:
          query: ENGENE CT3
        name: iri_discovery
        output: urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541> .

            <urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541> a cim:CurrentTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_e778653e9eea928f352f25dbc9da7cd2
    parameter_bindings:
      $ObjectIdentity(0, cim:CurrentTransformer): urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb
    question_text: I need to find all breakers connected to the current transformer
      0f3b6200-684d-4365-8d55-45baae73bffb.
    reference_steps:
    - - args:
          query: 0f3b6200-684d-4365-8d55-45baae73bffb
        name: iri_discovery
        output: urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb> .

            <urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb> a cim:CurrentTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_bf7f3cf3a405c664ae8b0f6df18e2070
    parameter_bindings:
      $ObjectIdentity(0, cim:CurrentTransformer): urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2
    question_text: Can you list all breakers that have a connection to 26d2f8aa-b651-46c5-a54d-05948f35f3d2?
    reference_steps:
    - - args:
          query: 26d2f8aa-b651-46c5-a54d-05948f35f3d2
        name: iri_discovery
        output: urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2> .

            <urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2> a cim:CurrentTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:CurrentTransformer)} .

    {$ObjectIdentity(0, cim:CurrentTransformer)} a cim:CurrentTransformer ;

    .'
  template_id: template_list_e3913b9766690e22450ec2be1c1c33e9
- description: A graph pattern which lists all values for breaker limited by parameters
    for loadbreakswitch (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters loadbreakswitch and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#LoadBreakSwitch
  paraphrases:
  - Which breakers are connected to the load break switch $ObjectIdentity(0, cim:LoadBreakSwitch)?
  - Can you identify all breakers that are linked with $ObjectIdentity(0, cim:LoadBreakSwitch)?
  - What breakers have a connection to the load break switch $ObjectIdentity(0, cim:LoadBreakSwitch)?
  - List all breakers that are directly connected to $ObjectIdentity(0, cim:LoadBreakSwitch).
  - I need to find the breakers associated with the load break switch $ObjectIdentity(0,
    cim:LoadBreakSwitch).
  questions:
  - id: question_9a04fb58a0063a079663e9c6cfcdf142
    parameter_bindings:
      $ObjectIdentity(0, cim:LoadBreakSwitch): urn:uuid:20605037-a626-4691-8601-89666564ff87
    question_text: List all breakers that are directly connected to 20605037-a626-4691-8601-89666564ff87.
    reference_steps:
    - - args:
          query: 20605037-a626-4691-8601-89666564ff87
        name: iri_discovery
        output: urn:uuid:20605037-a626-4691-8601-89666564ff87
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:20605037-a626-4691-8601-89666564ff87> .

            <urn:uuid:20605037-a626-4691-8601-89666564ff87> a cim:LoadBreakSwitch
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:LoadBreakSwitch)} .

    {$ObjectIdentity(0, cim:LoadBreakSwitch)} a cim:LoadBreakSwitch ;

    .'
  template_id: template_list_5cb9a508b8aeb8ca174e2baf5a0b6a76
- description: A graph pattern which lists all values for breaker limited by parameters
    for petersencoil (https://cim.ucaiug.io/rules#connectedTo) and by filter properties
    none.
  filters: []
  name: List breaker by parameters petersencoil and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#connectedTo
    type: https://cim.ucaiug.io/ns#PetersenCoil
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:PetersenCoil)?
  - Can you identify breakers that are directly linked to $ObjectIdentity(0, cim:PetersenCoil)?
  - What are the circuit breakers associated with the $ObjectIdentity(0, cim:PetersenCoil)?
  - List all breakers that establish a connection to $ObjectIdentity(0, cim:PetersenCoil).
  - Show me the breakers that are connected to $ObjectIdentity(0, cim:PetersenCoil).
  questions:
  - id: question_58fa2df4e8800d95a65f893c0a8daefe
    parameter_bindings:
      $ObjectIdentity(0, cim:PetersenCoil): urn:uuid:62585c75-b020-614c-89a1-fec7c118c3fa
    question_text: Can you identify breakers that are directly linked to 62585c75-b020-614c-89a1-fec7c118c3fa?
    reference_steps:
    - - args:
          query: 62585c75-b020-614c-89a1-fec7c118c3fa
        name: iri_discovery
        output: urn:uuid:62585c75-b020-614c-89a1-fec7c118c3fa
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:connectedTo <urn:uuid:62585c75-b020-614c-89a1-fec7c118c3fa> .

            <urn:uuid:62585c75-b020-614c-89a1-fec7c118c3fa> a cim:PetersenCoil ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:connectedTo {$ObjectIdentity(0, cim:PetersenCoil)} .

    {$ObjectIdentity(0, cim:PetersenCoil)} a cim:PetersenCoil ;

    .'
  template_id: template_list_7f0b5de339c901246dbd035330e44e03
- description: A graph pattern which lists all values for breaker limited by parameters
    for bay (https://cim.ucaiug.io/rules#isPart), substation (https://cim.ucaiug.io/rules#isPartTransitive)
    and by filter properties none.
  filters: []
  name: List breaker by parameters bay, substation and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPart
    type: https://cim.ucaiug.io/ns#Bay
  - name: param_1
    path:
    - https://cim.ucaiug.io/rules#isPartTransitive
    type: https://cim.ucaiug.io/ns#Substation
  paraphrases:
  - What breakers are part of $ObjectIdentity(0, cim:Bay) and transitively part of
    $ObjectIdentity(1, cim:Substation)?
  - Can you identify all circuit breakers located in $ObjectIdentity(0, cim:Bay) that
    are also associated with $ObjectIdentity(1, cim:Substation)?
  - Which breakers belong to $ObjectIdentity(0, cim:Bay) and are transitively connected
    to $ObjectIdentity(1, cim:Substation)?
  - Find all breakers that are contained within $ObjectIdentity(0, cim:Bay) and have
    a transitive relationship with $ObjectIdentity(1, cim:Substation).
  - Show me the circuit breakers that are components of $ObjectIdentity(0, cim:Bay)
    and are transitively a part of $ObjectIdentity(1, cim:Substation).
  questions:
  - id: question_e5b0eefc3d81593b534c7b9c33c976e6
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:e3a27e90-4941-8146-86c4-932c8016b8d3
      $ObjectIdentity(1, cim:Substation): urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
    question_text: What breakers are part of e3a27e90-4941-8146-86c4-932c8016b8d3
      and transitively part of KRISTIANSAND?
    reference_steps:
    - - args:
          query: e3a27e90-4941-8146-86c4-932c8016b8d3
        name: iri_discovery
        output: urn:uuid:e3a27e90-4941-8146-86c4-932c8016b8d3
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: KRISTIANSAND
        name: iri_discovery
        output: urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:e3a27e90-4941-8146-86c4-932c8016b8d3> ;

            cimr:isPartTransitive <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:e3a27e90-4941-8146-86c4-932c8016b8d3> a cim:Bay ;

            .

            <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_34e9267727234815734b8ab0d0aabfa4
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d
      $ObjectIdentity(1, cim:Substation): urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
    question_text: Find all breakers that are contained within f2b5acf1-6067-4d18-9d75-ea1611013a3d
      and have a transitive relationship with FROLAND.
    reference_steps:
    - - args:
          query: f2b5acf1-6067-4d18-9d75-ea1611013a3d
        name: iri_discovery
        output: urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: FROLAND
        name: iri_discovery
        output: urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d> ;

            cimr:isPartTransitive <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:f2b5acf1-6067-4d18-9d75-ea1611013a3d> a cim:Bay ;

            .

            <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2714d85d-92e7-4f88-a488-f39e782a6298"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_6bc30fcf3eed6f01bca947a3cbfb1c88
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3
      $ObjectIdentity(1, cim:Substation): urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
    question_text: Find all breakers that are contained within d965c17e-a3fe-c447-8139-b55a1201b3b3
      and have a transitive relationship with KRISTIANSAND.
    reference_steps:
    - - args:
          query: d965c17e-a3fe-c447-8139-b55a1201b3b3
        name: iri_discovery
        output: urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: KRISTIANSAND
        name: iri_discovery
        output: urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3> ;

            cimr:isPartTransitive <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:d965c17e-a3fe-c447-8139-b55a1201b3b3> a cim:Bay ;

            .

            <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:fdf147d4-240d-2143-b01a-84fc829bc284"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0d415b1b-b4da-f34f-aafb-802c77edce8e"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_029974b5ffcf6d7c08542511b9c8c709
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:12c2570d-d7d8-445b-865d-eb981c7603de
      $ObjectIdentity(1, cim:Substation): urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
    question_text: What breakers are part of 12c2570d-d7d8-445b-865d-eb981c7603de
      and transitively part of 681a1e63-5a55-11eb-a658-74e5f963e191?
    reference_steps:
    - - args:
          query: 12c2570d-d7d8-445b-865d-eb981c7603de
        name: iri_discovery
        output: urn:uuid:12c2570d-d7d8-445b-865d-eb981c7603de
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: 681a1e63-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:12c2570d-d7d8-445b-865d-eb981c7603de> ;

            cimr:isPartTransitive <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:12c2570d-d7d8-445b-865d-eb981c7603de> a cim:Bay ;

            .

            <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2fb546e7-9e06-4356-a3ad-7e3756c34f6a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_4f3f447237dc50cd1b364e2d673647d2
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e
      $ObjectIdentity(1, cim:Substation): urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
    question_text: Can you identify all circuit breakers located in c356ea84-abae-cb43-895f-7118f2f82b3e
      that are also associated with KRISTIANSAND?
    reference_steps:
    - - args:
          query: c356ea84-abae-cb43-895f-7118f2f82b3e
        name: iri_discovery
        output: urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: KRISTIANSAND
        name: iri_discovery
        output: urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e> ;

            cimr:isPartTransitive <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e> a cim:Bay ;

            .

            <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f> a cim:Substation ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:316f39b6-0fed-ea41-87a1-0f5119e136c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:30b297b4-8e19-da40-9f52-fb9175136a22"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPart {$ObjectIdentity(0, cim:Bay)} ;

    cimr:isPartTransitive {$ObjectIdentity(1, cim:Substation)} .

    {$ObjectIdentity(0, cim:Bay)} a cim:Bay ;

    .

    {$ObjectIdentity(1, cim:Substation)} a cim:Substation ;

    .'
  template_id: template_list_c4f9a4b146818776ebbbd8e5cdac1dab
- description: A graph pattern which lists all values for breaker limited by parameters
    for bay (https://cim.ucaiug.io/rules#isPart), feature (https://cim.ucaiug.io/rules#isPartTransitive)
    and by filter properties none.
  filters: []
  name: List breaker by parameters bay, feature and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#isPart
    type: https://cim.ucaiug.io/ns#Bay
  - name: param_1
    path:
    - https://cim.ucaiug.io/rules#isPartTransitive
    type: http://www.opengis.net/ont/geosparql#Feature
  paraphrases:
  - Which circuit breakers are part of $ObjectIdentity(0, cim:Bay) and are transitively
    part of $ObjectIdentity(1, geo:Feature)?
  - Find all breakers located within $ObjectIdentity(0, cim:Bay) that are also transitively
    associated with $ObjectIdentity(1, geo:Feature).
  - What breakers belong to $ObjectIdentity(0, cim:Bay) and have a transitive connection
    to $ObjectIdentity(1, geo:Feature)?
  - Can you identify all circuit breakers that are part of $ObjectIdentity(0, cim:Bay)
    as well as being transitively included in $ObjectIdentity(1, geo:Feature)?
  - List the breakers that are contained within $ObjectIdentity(0, cim:Bay) and are
    transitively part of $ObjectIdentity(1, geo:Feature).
  questions:
  - id: question_9044d68433c95dde5eab1caa6574003f
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:4d1852d5-5acc-4e31-bf1e-320aa6a7ba5b
      $ObjectIdentity(1, geo:Feature): urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
    question_text: Can you identify all circuit breakers that are part of 4d1852d5-5acc-4e31-bf1e-320aa6a7ba5b
      as well as being transitively included in 681a1e63-5a55-11eb-a658-74e5f963e191?
    reference_steps:
    - - args:
          query: 4d1852d5-5acc-4e31-bf1e-320aa6a7ba5b
        name: iri_discovery
        output: urn:uuid:4d1852d5-5acc-4e31-bf1e-320aa6a7ba5b
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: 681a1e63-5a55-11eb-a658-74e5f963e191
        name: iri_discovery
        output: urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:4d1852d5-5acc-4e31-bf1e-320aa6a7ba5b> ;

            cimr:isPartTransitive <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:4d1852d5-5acc-4e31-bf1e-320aa6a7ba5b> a cim:Bay ;

            .

            <urn:uuid:681a1e63-5a55-11eb-a658-74e5f963e191> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_86df039337214534431d9aab9f120e90
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e
      $ObjectIdentity(1, geo:Feature): urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
    question_text: List the breakers that are contained within KRISTIAN300G3 and are
      transitively part of f176965a-9aeb-11e5-91da-b8763fd99c5f.
    reference_steps:
    - - args:
          query: KRISTIAN300G3
        name: iri_discovery
        output: urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: f176965a-9aeb-11e5-91da-b8763fd99c5f
        name: iri_discovery
        output: urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e> ;

            cimr:isPartTransitive <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:c356ea84-abae-cb43-895f-7118f2f82b3e> a cim:Bay ;

            .

            <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:316f39b6-0fed-ea41-87a1-0f5119e136c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:30b297b4-8e19-da40-9f52-fb9175136a22"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_bd51dfca867984c019f813410796139c
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:29ace056-c4e8-46ea-8935-38f32ddbee49
      $ObjectIdentity(1, geo:Feature): urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191
    question_text: Find all breakers located within ENGENE 22 T Ba1 that are also
      transitively associated with ENGENE.
    reference_steps:
    - - args:
          query: ENGENE 22 T Ba1
        name: iri_discovery
        output: urn:uuid:29ace056-c4e8-46ea-8935-38f32ddbee49
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: ENGENE
        name: iri_discovery
        output: urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:29ace056-c4e8-46ea-8935-38f32ddbee49> ;

            cimr:isPartTransitive <urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191>
            .

            <urn:uuid:29ace056-c4e8-46ea-8935-38f32ddbee49> a cim:Bay ;

            .

            <urn:uuid:681a1e15-5a55-11eb-a658-74e5f963e191> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b16294fe-269c-4f3d-b6af-4bc473c663d6"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_3a1d669ddd96aa42693eb84f91ca0102
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:58f5a32f-aec4-d647-9119-a1b6c15fa01a
      $ObjectIdentity(1, geo:Feature): urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
    question_text: Can you identify all circuit breakers that are part of 58f5a32f-aec4-d647-9119-a1b6c15fa01a
      as well as being transitively included in KRISTIANSAND?
    reference_steps:
    - - args:
          query: 58f5a32f-aec4-d647-9119-a1b6c15fa01a
        name: iri_discovery
        output: urn:uuid:58f5a32f-aec4-d647-9119-a1b6c15fa01a
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: KRISTIANSAND
        name: iri_discovery
        output: urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:58f5a32f-aec4-d647-9119-a1b6c15fa01a> ;

            cimr:isPartTransitive <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f>
            .

            <urn:uuid:58f5a32f-aec4-d647-9119-a1b6c15fa01a> a cim:Bay ;

            .

            <urn:uuid:f176965a-9aeb-11e5-91da-b8763fd99c5f> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b209ada6-1835-1540-8868-1cd5e65016c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:56013ae5-ff4f-2949-b59a-e60c62702d3e"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_81406b4be23c048f7f892d6ec57b07b1
    parameter_bindings:
      $ObjectIdentity(0, cim:Bay): urn:uuid:c15f3cd9-580d-44e1-92db-10bd41d87bad
      $ObjectIdentity(1, geo:Feature): urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71
    question_text: What breakers belong to c15f3cd9-580d-44e1-92db-10bd41d87bad and
      have a transitive connection to ccffa748-19de-412a-9946-1fc846d98b71?
    reference_steps:
    - - args:
          query: c15f3cd9-580d-44e1-92db-10bd41d87bad
        name: iri_discovery
        output: urn:uuid:c15f3cd9-580d-44e1-92db-10bd41d87bad
        output_media_type: text/uri
        required_columns:
        - uri
      - args:
          query: ccffa748-19de-412a-9946-1fc846d98b71
        name: iri_discovery
        output: urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:isPart <urn:uuid:c15f3cd9-580d-44e1-92db-10bd41d87bad> ;

            cimr:isPartTransitive <urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71>
            .

            <urn:uuid:c15f3cd9-580d-44e1-92db-10bd41d87bad> a cim:Bay ;

            .

            <urn:uuid:ccffa748-19de-412a-9946-1fc846d98b71> a geo:Feature ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:isPart {$ObjectIdentity(0, cim:Bay)} ;

    cimr:isPartTransitive {$ObjectIdentity(1, geo:Feature)} .

    {$ObjectIdentity(0, cim:Bay)} a cim:Bay ;

    .

    {$ObjectIdentity(1, geo:Feature)} a geo:Feature ;

    .'
  template_id: template_list_1ef98471c15bd4b480c13efbb68e7cdb
- description: A graph pattern which lists all values for breaker limited by parameters
    for connectivitynode (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/ns#Terminal.ConnectivityNode)
    and by filter properties none.
  filters: []
  name: List breaker by parameters connectivitynode and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/ns#Terminal.ConnectivityNode
    type: https://cim.ucaiug.io/ns#ConnectivityNode
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:ConnectivityNode)?
  - Can you identify all breakers linked to the $ObjectIdentity(0, cim:ConnectivityNode)
    connectivity node?
  - What are the circuit breakers associated with $ObjectIdentity(0, cim:ConnectivityNode)?
  - Find all breakers that are directly connected through the connectivity node $ObjectIdentity(0,
    cim:ConnectivityNode).
  - I need to know which breakers have terminals connected to $ObjectIdentity(0, cim:ConnectivityNode).
  questions:
  - id: question_cbc3b6dd515a8c1c30488331d809dce0
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:3d152ee3-5a28-1040-b170-5f83682c0d5c
    question_text: Can you identify all breakers linked to the 3d152ee3-5a28-1040-b170-5f83682c0d5c
      connectivity node?
    reference_steps:
    - - args:
          query: 3d152ee3-5a28-1040-b170-5f83682c0d5c
        name: iri_discovery
        output: urn:uuid:3d152ee3-5a28-1040-b170-5f83682c0d5c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.ConnectivityNode <urn:uuid:3d152ee3-5a28-1040-b170-5f83682c0d5c>
            .

            <urn:uuid:3d152ee3-5a28-1040-b170-5f83682c0d5c> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_2397dfa922581d701615aa81db93591c
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:a119b074-2851-3341-870b-81bce2a20960
    question_text: Find all breakers that are directly connected through the connectivity
      node a119b074-2851-3341-870b-81bce2a20960.
    reference_steps:
    - - args:
          query: a119b074-2851-3341-870b-81bce2a20960
        name: iri_discovery
        output: urn:uuid:a119b074-2851-3341-870b-81bce2a20960
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.ConnectivityNode <urn:uuid:a119b074-2851-3341-870b-81bce2a20960>
            .

            <urn:uuid:a119b074-2851-3341-870b-81bce2a20960> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:373c4779-0905-d34c-bbc9-d200f848cbd9"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_2e8833e0c76e2078b0f1cbfe5d80f04d
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:8a6562a6-8eb8-49e3-92a1-155587726e3f
    question_text: Which circuit breakers are connected to 8a6562a6-8eb8-49e3-92a1-155587726e3f?
    reference_steps:
    - - args:
          query: 8a6562a6-8eb8-49e3-92a1-155587726e3f
        name: iri_discovery
        output: urn:uuid:8a6562a6-8eb8-49e3-92a1-155587726e3f
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.ConnectivityNode <urn:uuid:8a6562a6-8eb8-49e3-92a1-155587726e3f>
            .

            <urn:uuid:8a6562a6-8eb8-49e3-92a1-155587726e3f> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:2714d85d-92e7-4f88-a488-f39e782a6298"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_41922a9b4698c7c043095d3f8a11680f
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:632d75e3-fe75-d449-a589-afb7493c954b
    question_text: I need to know which breakers have terminals connected to 632d75e3-fe75-d449-a589-afb7493c954b.
    reference_steps:
    - - args:
          query: 632d75e3-fe75-d449-a589-afb7493c954b
        name: iri_discovery
        output: urn:uuid:632d75e3-fe75-d449-a589-afb7493c954b
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.ConnectivityNode <urn:uuid:632d75e3-fe75-d449-a589-afb7493c954b>
            .

            <urn:uuid:632d75e3-fe75-d449-a589-afb7493c954b> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_e1110d26dda1b5d1f2adff8c92f48051
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:c40dd7e6-4d04-c749-b05a-7d733ba2661c
    question_text: Which circuit breakers are connected to ARENDAL CN 014?
    reference_steps:
    - - args:
          query: ARENDAL CN 014
        name: iri_discovery
        output: urn:uuid:c40dd7e6-4d04-c749-b05a-7d733ba2661c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.ConnectivityNode <urn:uuid:c40dd7e6-4d04-c749-b05a-7d733ba2661c>
            .

            <urn:uuid:c40dd7e6-4d04-c749-b05a-7d733ba2661c> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:5ae8b25f-24cc-e34b-b238-2aea59d516c5"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cim:Terminal.ConnectivityNode {$ObjectIdentity(0, cim:ConnectivityNode)}
    .

    {$ObjectIdentity(0, cim:ConnectivityNode)} a cim:ConnectivityNode ;

    .'
  template_id: template_list_784243e3c1889fca95a9595b1739789a
- description: A graph pattern which lists all values for breaker limited by parameters
    for phasecode (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/ns#Terminal.phases)
    and by filter properties none.
  filters: []
  name: List breaker by parameters phasecode and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/ns#Terminal.phases
    type: https://cim.ucaiug.io/ns#PhaseCode
  paraphrases:
  - Which breakers are associated with the phase code $ObjectIdentity(0, cim:PhaseCode)?
  - Can you identify all circuit breakers connected to the phase $ObjectIdentity(0,
    cim:PhaseCode)?
  - What breakers have terminals that operate on the phase configuration $ObjectIdentity(0,
    cim:PhaseCode)?
  - List all breakers that are linked to equipment terminals with the phase code $ObjectIdentity(0,
    cim:PhaseCode).
  - Show me all circuit breakers corresponding to the phase $ObjectIdentity(0, cim:PhaseCode).
  questions:
  - id: question_5f2dd1f7292f7d4e802bcf682144953a
    parameter_bindings:
      $ObjectIdentity(0, cim:PhaseCode): https://cim.ucaiug.io/ns#PhaseCode.ABCN
    question_text: Show me all circuit breakers corresponding to the phase ABCN.
    reference_steps:
    - - args:
          query: ABCN
        name: iri_discovery
        output: https://cim.ucaiug.io/ns#PhaseCode.ABCN
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.phases <https://cim.ucaiug.io/ns#PhaseCode.ABCN>
            .

            <https://cim.ucaiug.io/ns#PhaseCode.ABCN> a cim:PhaseCode ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_659f7b283edf3fc4e193a6ee83a13423
    parameter_bindings:
      $ObjectIdentity(0, cim:PhaseCode): https://cim.ucaiug.io/ns#PhaseCode.N
    question_text: List all breakers that are linked to equipment terminals with the
      phase code N.
    reference_steps:
    - - args:
          query: N
        name: iri_discovery
        output: https://cim.ucaiug.io/ns#PhaseCode.N
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.phases <https://cim.ucaiug.io/ns#PhaseCode.N>
            .

            <https://cim.ucaiug.io/ns#PhaseCode.N> a cim:PhaseCode ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_6c63bd427410f6f25adf8a960a6ae933
    parameter_bindings:
      $ObjectIdentity(0, cim:PhaseCode): https://cim.ucaiug.io/ns#PhaseCode.ABC
    question_text: Which breakers are associated with the phase code ABC?
    reference_steps:
    - - args:
          query: ABC
        name: iri_discovery
        output: https://cim.ucaiug.io/ns#PhaseCode.ABC
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.phases <https://cim.ucaiug.io/ns#PhaseCode.ABC>
            .

            <https://cim.ucaiug.io/ns#PhaseCode.ABC> a cim:PhaseCode ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:48668646-105a-490d-aaad-3259b852aa23"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cim:Terminal.phases {$ObjectIdentity(0, cim:PhaseCode)}
    .

    {$ObjectIdentity(0, cim:PhaseCode)} a cim:PhaseCode ;

    .'
  template_id: template_list_bb5ba6e5dc93d86eb8097f2050eee8b4
- description: A graph pattern which lists all values for breaker limited by parameters
    for topologicalnode (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/ns#Terminal.TopologicalNode)
    and by filter properties none.
  filters: []
  name: List breaker by parameters topologicalnode and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/ns#Terminal.TopologicalNode
    type: https://cim.ucaiug.io/ns#TopologicalNode
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:TopologicalNode)?
  - Can you list all breakers linked to the topological node $ObjectIdentity(0, cim:TopologicalNode)?
  - What are the breakers associated with $ObjectIdentity(0, cim:TopologicalNode)
    through their terminals?
  - Find all circuit breakers that have a connection to the topological node $ObjectIdentity(0,
    cim:TopologicalNode).
  - Show me the breakers that are tied to $ObjectIdentity(0, cim:TopologicalNode)
    via their equipment terminals.
  questions:
  - id: question_1888333b16ca5b82cee3c359e97e2e88
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa255-9549-11ec-b226-48ba4eadba68
    question_text: Which circuit breakers are connected to TELEMA2 04 CN49?
    reference_steps:
    - - args:
          query: TELEMA2 04 CN49
        name: iri_discovery
        output: urn:uuid:734aa255-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.TopologicalNode <urn:uuid:734aa255-9549-11ec-b226-48ba4eadba68>
            .

            <urn:uuid:734aa255-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_cbb0dc97f7381a39dcb47c585ed4a30c
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa258-9549-11ec-b226-48ba4eadba68
    question_text: Can you list all breakers linked to the topological node 734aa258-9549-11ec-b226-48ba4eadba68?
    reference_steps:
    - - args:
          query: 734aa258-9549-11ec-b226-48ba4eadba68
        name: iri_discovery
        output: urn:uuid:734aa258-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.TopologicalNode <urn:uuid:734aa258-9549-11ec-b226-48ba4eadba68>
            .

            <urn:uuid:734aa258-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:b63024f5-df5f-4d21-ba9d-97288bdabe97"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_26c530b0be0d73dadae4d32098223346
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa23c-9549-11ec-b226-48ba4eadba68
    question_text: Can you list all breakers linked to the topological node 734aa23c-9549-11ec-b226-48ba4eadba68?
    reference_steps:
    - - args:
          query: 734aa23c-9549-11ec-b226-48ba4eadba68
        name: iri_discovery
        output: urn:uuid:734aa23c-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.TopologicalNode <urn:uuid:734aa23c-9549-11ec-b226-48ba4eadba68>
            .

            <urn:uuid:734aa23c-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:d4afd20b-a007-43f0-9736-4a868c4cc65a"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_080b64262db29854d1bd59da08646f4b
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa23d-9549-11ec-b226-48ba4eadba68
    question_text: Show me the breakers that are tied to 734aa23d-9549-11ec-b226-48ba4eadba68
      via their equipment terminals.
    reference_steps:
    - - args:
          query: 734aa23d-9549-11ec-b226-48ba4eadba68
        name: iri_discovery
        output: urn:uuid:734aa23d-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.TopologicalNode <urn:uuid:734aa23d-9549-11ec-b226-48ba4eadba68>
            .

            <urn:uuid:734aa23d-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd41276d-9ea7-47a8-a0f3-65215c8225a5"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_d8e80164c1280b0481027665851d742f
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa244-9549-11ec-b226-48ba4eadba68
    question_text: What are the breakers associated with NEDENES CN 004 through their
      terminals?
    reference_steps:
    - - args:
          query: NEDENES CN 004
        name: iri_discovery
        output: urn:uuid:734aa244-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cim:Terminal.TopologicalNode <urn:uuid:734aa244-9549-11ec-b226-48ba4eadba68>
            .

            <urn:uuid:734aa244-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:38cd8874-fb01-462c-8c85-95dac14fee9c"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cim:Terminal.TopologicalNode {$ObjectIdentity(0, cim:TopologicalNode)}
    .

    {$ObjectIdentity(0, cim:TopologicalNode)} a cim:TopologicalNode ;

    .'
  template_id: template_list_14a4218a6d1633c9137bd7b4454290c9
- description: A graph pattern which lists all values for breaker limited by parameters
    for equipment (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters equipment and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#Equipment
  paraphrases:
  - Which circuit breakers are connected to the equipment $ObjectIdentity(0, cim:Equipment)
    through its terminals?
  - Can you identify the breakers associated with $ObjectIdentity(0, cim:Equipment)
    via terminal connections?
  - What are the breakers that have connections to the terminals of $ObjectIdentity(0,
    cim:Equipment)?
  - I need to find all the circuit breakers linked to the equipment $ObjectIdentity(0,
    cim:Equipment) through terminal associations.
  - Show me the circuit breakers connected to $ObjectIdentity(0, cim:Equipment) using
    terminal connections.
  questions:
  - id: question_1ed67860915a1ef94adde7e2108ad17b
    parameter_bindings:
      $ObjectIdentity(0, cim:Equipment): urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2
    question_text: What are the breakers that have connections to the terminals of
      ARENDAL 300AS1 AB_S?
    reference_steps:
    - - args:
          query: ARENDAL 300AS1 AB_S
        name: iri_discovery
        output: urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2>
            .

            <urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2> a cim:Equipment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_06eba8bc18d075eef5ac2e38b97bcb01
    parameter_bindings:
      $ObjectIdentity(0, cim:Equipment): urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042
    question_text: I need to find all the circuit breakers linked to the equipment
      KRISTIAN300G4  AB_S through terminal associations.
    reference_steps:
    - - args:
          query: KRISTIAN300G4  AB_S
        name: iri_discovery
        output: urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042>
            .

            <urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042> a cim:Equipment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a7bb9a3e-03d8-3b46-9cf6-f2bf71ab7042"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_95aa9fe570b5e6d5a4f2caf2cbc2ac4b
    parameter_bindings:
      $ObjectIdentity(0, cim:Equipment): urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12
    question_text: Show me the circuit breakers connected to FROLAND 132 AR1E using
      terminal connections.
    reference_steps:
    - - args:
          query: FROLAND 132 AR1E
        name: iri_discovery
        output: urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12>
            .

            <urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12> a cim:Equipment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:a2a20c81-78b5-40bc-81d1-14ed8ea03e12"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_63e3badb8eee3e9b34e9a2b7ba314f40
    parameter_bindings:
      $ObjectIdentity(0, cim:Equipment): urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544
    question_text: What are the breakers that have connections to the terminals of
      05d4226b-111b-f747-84b4-cc7be03f3544?
    reference_steps:
    - - args:
          query: 05d4226b-111b-f747-84b4-cc7be03f3544
        name: iri_discovery
        output: urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544>
            .

            <urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544> a cim:Equipment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:05d4226b-111b-f747-84b4-cc7be03f3544"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_099a2c8c01c464b57b896e980d128ab3
    parameter_bindings:
      $ObjectIdentity(0, cim:Equipment): urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac
    question_text: I need to find all the circuit breakers linked to the equipment
      e399c43f-0e9e-ae42-a66e-116fcccb56ac through terminal associations.
    reference_steps:
    - - args:
          query: e399c43f-0e9e-ae42-a66e-116fcccb56ac
        name: iri_discovery
        output: urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac>
            .

            <urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac> a cim:Equipment ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:Equipment)}
    .

    {$ObjectIdentity(0, cim:Equipment)} a cim:Equipment ;

    .'
  template_id: template_list_baa0c307d8e5855a3ff56c5686e0d33b
- description: A graph pattern which lists all values for breaker limited by parameters
    for synchronousmachine (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters synchronousmachine and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#SynchronousMachine
  paraphrases:
  - What breakers are connected to $ObjectIdentity(0, cim:SynchronousMachine) via
    their terminals?
  - Can you list all breakers associated with the terminals of $ObjectIdentity(0,
    cim:SynchronousMachine)?
  - Which circuit breakers interact with $ObjectIdentity(0, cim:SynchronousMachine)
    through their terminal equipment?
  - Find all breakers that are linked to the terminals of $ObjectIdentity(0, cim:SynchronousMachine).
  - What are the breakers connected to $ObjectIdentity(0, cim:SynchronousMachine)
    through their terminal points?
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:SynchronousMachine)}
    .

    {$ObjectIdentity(0, cim:SynchronousMachine)} a cim:SynchronousMachine ;

    .'
  template_id: template_list_23cfde174c633c3d69244b3b5e814ba1
- description: A graph pattern which lists all values for breaker limited by parameters
    for aclinesegment (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters aclinesegment and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#ACLineSegment
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:ACLineSegment)?
  - Can you identify all breakers associated with $ObjectIdentity(0, cim:ACLineSegment)?
  - What are the circuit breakers linked to $ObjectIdentity(0, cim:ACLineSegment)
    through terminals?
  - List all breakers that are part of the equipment connection for $ObjectIdentity(0,
    cim:ACLineSegment).
  - Show me the breakers connected to $ObjectIdentity(0, cim:ACLineSegment) via terminal
    equipment.
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:ACLineSegment)}
    .

    {$ObjectIdentity(0, cim:ACLineSegment)} a cim:ACLineSegment ;

    .'
  template_id: template_list_ec6721d2b13d37ee056a8075aa28ad91
- description: A graph pattern which lists all values for breaker limited by parameters
    for feature (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters feature and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: http://www.opengis.net/ont/geosparql#Feature
  paraphrases:
  - Which circuit breakers are associated with the equipment $ObjectIdentity(0, geo:Feature)?
  - Can you identify all breakers linked to $ObjectIdentity(0, geo:Feature) through
    terminals?
  - What are the circuit breakers that are connected to $ObjectIdentity(0, geo:Feature)
    via its terminals?
  - Find the breakers that have an association with $ObjectIdentity(0, geo:Feature)
    through terminal connections.
  - Show me all circuit breakers connected to $ObjectIdentity(0, geo:Feature) by their
    terminals.
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, geo:Feature)}
    .

    {$ObjectIdentity(0, geo:Feature)} a geo:Feature ;

    .'
  template_id: template_list_57f3157f4d637f606f8b906d0f059e46
- description: A graph pattern which lists all values for breaker limited by parameters
    for breaker (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters breaker and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#Breaker
  paraphrases:
  - What are the circuit breakers that share terminals with $ObjectIdentity(0, cim:Breaker)?
  - Which breakers have terminal connections with $ObjectIdentity(0, cim:Breaker)?
  - Can you identify the circuit breakers that are connected via terminals to $ObjectIdentity(0,
    cim:Breaker)?
  - List all breakers that are terminally associated with $ObjectIdentity(0, cim:Breaker).
  - Which equipment, specifically breakers, are linked to $ObjectIdentity(0, cim:Breaker)
    through terminal associations?
  questions:
  - id: question_9a93cc05959ba35bb165383e56c8688f
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2
    question_text: Which equipment, specifically breakers, are linked to ARENDAL 300AS1
      AB_S through terminal associations?
    reference_steps:
    - - args:
          query: ARENDAL 300AS1 AB_S
        name: iri_discovery
        output: urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2>
            .

            <urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:22e5ddcf-ac23-b449-bc4f-83336535f7c2"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_fe9cde7b8ca53a4745ba79178ea11016
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253
    question_text: What are the circuit breakers that share terminals with KRISTIAN300G4  BB_S?
    reference_steps:
    - - args:
          query: KRISTIAN300G4  BB_S
        name: iri_discovery
        output: urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253>
            .

            <urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:0c75da66-5f3b-7d4a-809d-5a3772999253"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_0e09639c578c4efdb7560388c035d460
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac
    question_text: List all breakers that are terminally associated with e399c43f-0e9e-ae42-a66e-116fcccb56ac.
    reference_steps:
    - - args:
          query: e399c43f-0e9e-ae42-a66e-116fcccb56ac
        name: iri_discovery
        output: urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac>
            .

            <urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e399c43f-0e9e-ae42-a66e-116fcccb56ac"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_4ba7743fa64b0b7a238626b238b006d4
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73
    question_text: Can you identify the circuit breakers that are connected via terminals
      to ARENDAL 132 T1SP1E?
    reference_steps:
    - - args:
          query: ARENDAL 132 T1SP1E
        name: iri_discovery
        output: urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73>
            .

            <urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:e3b199ca-485b-4df8-99f0-fdd5e4f3ff73"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_8d8389c8118d011a3295b2b2840dce2e
    parameter_bindings:
      $ObjectIdentity(0, cim:Breaker): urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159
    question_text: List all breakers that are terminally associated with dd8be3ea-8ad3-f148-898c-5509662d5159.
    reference_steps:
    - - args:
          query: dd8be3ea-8ad3-f148-898c-5509662d5159
        name: iri_discovery
        output: urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159>
            .

            <urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159> a cim:Breaker ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:dd8be3ea-8ad3-f148-898c-5509662d5159"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:Breaker)}
    .

    {$ObjectIdentity(0, cim:Breaker)} a cim:Breaker ;

    .'
  template_id: template_list_2f7a30f6979d6427b945ce001ff3f650
- description: A graph pattern which lists all values for breaker limited by parameters
    for disconnector (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters disconnector and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#Disconnector
  paraphrases:
  - Which circuit breakers are associated with the disconnector $ObjectIdentity(0,
    cim:Disconnector) through their terminal connections?
  - Can you identify the breakers connected to $ObjectIdentity(0, cim:Disconnector)
    via their terminals?
  - What breakers are linked to the disconnector $ObjectIdentity(0, cim:Disconnector)
    through terminal associations?
  - Find all breakers that have terminal connections to the disconnector $ObjectIdentity(0,
    cim:Disconnector).
  - Show me the circuit breakers that are terminally connected to $ObjectIdentity(0,
    cim:Disconnector).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:Disconnector)}
    .

    {$ObjectIdentity(0, cim:Disconnector)} a cim:Disconnector ;

    .'
  template_id: template_list_0d1b8bae03ee42b5956631e0efe078fe
- description: A graph pattern which lists all values for breaker limited by parameters
    for powertransformer (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters powertransformer and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#PowerTransformer
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:PowerTransformer)?
  - Can you identify the breakers that are linked to the power transformer $ObjectIdentity(0,
    cim:PowerTransformer)?
  - What are the circuit breakers associated with $ObjectIdentity(0, cim:PowerTransformer)
    through their terminals?
  - I need to find all breakers that interface with $ObjectIdentity(0, cim:PowerTransformer).
  - Show me the circuit breakers that establish a connection to $ObjectIdentity(0,
    cim:PowerTransformer).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:PowerTransformer)}
    .

    {$ObjectIdentity(0, cim:PowerTransformer)} a cim:PowerTransformer ;

    .'
  template_id: template_list_4c684e1cbd840e42fac83fd0f92e7ffd
- description: A graph pattern which lists all values for breaker limited by parameters
    for busbarsection (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters busbarsection and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#BusbarSection
  paraphrases:
  - What breakers are connected to $ObjectIdentity(0, cim:BusbarSection)?
  - Can you identify all circuit breakers that are associated with $ObjectIdentity(0,
    cim:BusbarSection)?
  - Which breakers have terminals linked to $ObjectIdentity(0, cim:BusbarSection)?
  - Find all breakers that are connected to the busbar section $ObjectIdentity(0,
    cim:BusbarSection).
  - List all circuit breakers associated with $ObjectIdentity(0, cim:BusbarSection).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:BusbarSection)}
    .

    {$ObjectIdentity(0, cim:BusbarSection)} a cim:BusbarSection ;

    .'
  template_id: template_list_62e26aab11a900dfbab79576e0390538
- description: A graph pattern which lists all values for breaker limited by parameters
    for conformload (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters conformload and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#ConformLoad
  paraphrases:
  - Which circuit breakers are connected to the equipment $ObjectIdentity(0, cim:ConformLoad)?
  - Can you identify the breakers that are associated with $ObjectIdentity(0, cim:ConformLoad)?
  - What breakers have connections to the load equipment $ObjectIdentity(0, cim:ConformLoad)?
  - Show me all breakers linked to the conforming load $ObjectIdentity(0, cim:ConformLoad).
  - What are the circuit breakers connected to $ObjectIdentity(0, cim:ConformLoad)
    through their terminals?
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:ConformLoad)}
    .

    {$ObjectIdentity(0, cim:ConformLoad)} a cim:ConformLoad ;

    .'
  template_id: template_list_cb185d0997dbbb794b2e100e1115057f
- description: A graph pattern which lists all values for breaker limited by parameters
    for linearshuntcompensator (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters linearshuntcompensator and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#LinearShuntCompensator
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:LinearShuntCompensator)?
  - Can you list all breakers associated with $ObjectIdentity(0, cim:LinearShuntCompensator)?
  - What breakers are directly connected to the shunt compensator $ObjectIdentity(0,
    cim:LinearShuntCompensator)?
  - Find all circuit breakers linked to the $ObjectIdentity(0, cim:LinearShuntCompensator)
    equipment.
  - Show me the breakers that have connections to the equipment $ObjectIdentity(0,
    cim:LinearShuntCompensator).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:LinearShuntCompensator)}
    .

    {$ObjectIdentity(0, cim:LinearShuntCompensator)} a cim:LinearShuntCompensator
    ;

    .'
  template_id: template_list_7904bc9be0e9fb832243123ad5401681
- description: A graph pattern which lists all values for breaker limited by parameters
    for nonconformload (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters nonconformload and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#NonConformLoad
  paraphrases:
  - Which circuit breaker is connected to the terminal of $ObjectIdentity(0, cim:NonConformLoad)?
  - Can you identify the breakers associated with the terminals of $ObjectIdentity(0,
    cim:NonConformLoad)?
  - What breakers are linked through terminals to $ObjectIdentity(0, cim:NonConformLoad)?
  - I need to find all circuit breakers that are connected via terminals to $ObjectIdentity(0,
    cim:NonConformLoad).
  - Show me the circuit breakers associated with $ObjectIdentity(0, cim:NonConformLoad)
    through their terminals.
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:NonConformLoad)}
    .

    {$ObjectIdentity(0, cim:NonConformLoad)} a cim:NonConformLoad ;

    .'
  template_id: template_list_779d5c8971be28265c4d484fd1a61f46
- description: A graph pattern which lists all values for breaker limited by parameters
    for fuse (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters fuse and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#Fuse
  paraphrases:
  - Which circuit breakers are connected to the fuse $ObjectIdentity(0, cim:Fuse)?
  - Can you identify all breakers linked to the fuse $ObjectIdentity(0, cim:Fuse)?
  - What are the circuit breakers associated with the fuse $ObjectIdentity(0, cim:Fuse)?
  - Show me the breakers that are connected to $ObjectIdentity(0, cim:Fuse).
  - List all circuit breakers that have a connection to the fuse $ObjectIdentity(0,
    cim:Fuse).
  questions:
  - id: question_406d14ac31d8ec96a7b1e0f9c238a8ba
    parameter_bindings:
      $ObjectIdentity(0, cim:Fuse): urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0
    question_text: Can you identify all breakers linked to the fuse 81f3131f-baed-442d-bf7a-3606832fc3e0?
    reference_steps:
    - - args:
          query: 81f3131f-baed-442d-bf7a-3606832fc3e0
        name: iri_discovery
        output: urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0>
            .

            <urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0> a cim:Fuse ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}},
          {"breaker": {"type": "uri", "value": "urn:uuid:81f3131f-baed-442d-bf7a-3606832fc3e0"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:Fuse)}
    .

    {$ObjectIdentity(0, cim:Fuse)} a cim:Fuse ;

    .'
  template_id: template_list_ca6915153c58d8df08e95215c551bedb
- description: A graph pattern which lists all values for breaker limited by parameters
    for equivalentinjection (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters equivalentinjection and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#EquivalentInjection
  paraphrases:
  - Which circuit breakers are connected to $ObjectIdentity(0, cim:EquivalentInjection)?
  - Can you list all breakers that are associated with $ObjectIdentity(0, cim:EquivalentInjection)
    through equipment terminals?
  - What are the circuit breakers linked to $ObjectIdentity(0, cim:EquivalentInjection)
    via terminal connections?
  - Identify all breakers that interact with $ObjectIdentity(0, cim:EquivalentInjection)
    through terminal-based equipment connections.
  - Show me the breakers that are connected to $ObjectIdentity(0, cim:EquivalentInjection)
    through its associated terminals.
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:EquivalentInjection)}
    .

    {$ObjectIdentity(0, cim:EquivalentInjection)} a cim:EquivalentInjection ;

    .'
  template_id: template_list_1d6deef6e2c6cb2d1794003be12e86bb
- description: A graph pattern which lists all values for breaker limited by parameters
    for currenttransformer (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters currenttransformer and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#CurrentTransformer
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:CurrentTransformer)?
  - Can you identify all breakers linked through terminals to $ObjectIdentity(0, cim:CurrentTransformer)?
  - What circuit breakers are associated with $ObjectIdentity(0, cim:CurrentTransformer)
    via their terminals?
  - List all breakers connected through equipment terminals to $ObjectIdentity(0,
    cim:CurrentTransformer).
  - I need to find the breakers that have a terminal connection with $ObjectIdentity(0,
    cim:CurrentTransformer).
  questions:
  - id: question_a8cef58918c60e9106b6dc2548c14ba4
    parameter_bindings:
      $ObjectIdentity(0, cim:CurrentTransformer): urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541
    question_text: Which breakers are connected to cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541?
    reference_steps:
    - - args:
          query: cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541
        name: iri_discovery
        output: urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541>
            .

            <urn:uuid:cfb857c9-3ac2-4ea8-bcdb-1e50bd15f541> a cim:CurrentTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_8cd872accfff6407436a88aa334f45a3
    parameter_bindings:
      $ObjectIdentity(0, cim:CurrentTransformer): urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb
    question_text: List all breakers connected through equipment terminals to ENGENE
      CT2.
    reference_steps:
    - - args:
          query: ENGENE CT2
        name: iri_discovery
        output: urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb>
            .

            <urn:uuid:0f3b6200-684d-4365-8d55-45baae73bffb> a cim:CurrentTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_6ea85ae6166678f0a8d6387c8ae41324
    parameter_bindings:
      $ObjectIdentity(0, cim:CurrentTransformer): urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2
    question_text: Which breakers are connected to 26d2f8aa-b651-46c5-a54d-05948f35f3d2?
    reference_steps:
    - - args:
          query: 26d2f8aa-b651-46c5-a54d-05948f35f3d2
        name: iri_discovery
        output: urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2>
            .

            <urn:uuid:26d2f8aa-b651-46c5-a54d-05948f35f3d2> a cim:CurrentTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:CurrentTransformer)}
    .

    {$ObjectIdentity(0, cim:CurrentTransformer)} a cim:CurrentTransformer ;

    .'
  template_id: template_list_e88b4a583246e89e4e8c6a4cac41d611
- description: A graph pattern which lists all values for breaker limited by parameters
    for potentialtransformer (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters potentialtransformer and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#PotentialTransformer
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:PotentialTransformer)?
  - Can you identify all breakers associated with $ObjectIdentity(0, cim:PotentialTransformer)
    through their terminals?
  - What breakers are linked to the potential transformer $ObjectIdentity(0, cim:PotentialTransformer)?
  - Find all circuit breakers that are connected via terminals to $ObjectIdentity(0,
    cim:PotentialTransformer).
  - List the breakers associated with the potential transformer identified as $ObjectIdentity(0,
    cim:PotentialTransformer).
  questions:
  - id: question_704c7158fbf8f9cbca19e00719896aff
    parameter_bindings:
      $ObjectIdentity(0, cim:PotentialTransformer): urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672
    question_text: Find all circuit breakers that are connected via terminals to ENGENE
      VT1.
    reference_steps:
    - - args:
          query: ENGENE VT1
        name: iri_discovery
        output: urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672>
            .

            <urn:uuid:fd11bf7f-138b-4a1b-802c-25262b7b8672> a cim:PotentialTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_f54bba5387b68a4091b9cdda0090526f
    parameter_bindings:
      $ObjectIdentity(0, cim:PotentialTransformer): urn:uuid:74936f6f-296e-44db-b772-1d522f317069
    question_text: Which breakers are connected to 74936f6f-296e-44db-b772-1d522f317069?
    reference_steps:
    - - args:
          query: 74936f6f-296e-44db-b772-1d522f317069
        name: iri_discovery
        output: urn:uuid:74936f6f-296e-44db-b772-1d522f317069
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:74936f6f-296e-44db-b772-1d522f317069>
            .

            <urn:uuid:74936f6f-296e-44db-b772-1d522f317069> a cim:PotentialTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  - id: question_92b0885f285a0b7bc196b6530c73cc4b
    parameter_bindings:
      $ObjectIdentity(0, cim:PotentialTransformer): urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c
    question_text: List the breakers associated with the potential transformer identified
      as 03f7a245-aeca-48ba-af07-58419fb9b77c.
    reference_steps:
    - - args:
          query: 03f7a245-aeca-48ba-af07-58419fb9b77c
        name: iri_discovery
        output: urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?breaker WHERE {

            ?breaker a cim:Breaker ;

            cimr:Equipment.Terminals/cimr:Terminal.Equipment <urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c>
            .

            <urn:uuid:03f7a245-aeca-48ba-af07-58419fb9b77c> a cim:PotentialTransformer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["breaker"]}, "results": {"bindings": [{"breaker":
          {"type": "uri", "value": "urn:uuid:12156bb5-7a82-4e95-8ea4-2ff8573133fe"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - breaker
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:PotentialTransformer)}
    .

    {$ObjectIdentity(0, cim:PotentialTransformer)} a cim:PotentialTransformer ;

    .'
  template_id: template_list_ce7c31701b12c4382ee717fc69d4e920
- description: A graph pattern which lists all values for breaker limited by parameters
    for loadbreakswitch (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters loadbreakswitch and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#LoadBreakSwitch
  paraphrases:
  - Which circuit breakers are connected to the load break switch $ObjectIdentity(0,
    cim:LoadBreakSwitch)?
  - Can you identify all breakers associated with the load break switch $ObjectIdentity(0,
    cim:LoadBreakSwitch)?
  - What are the breakers that establish a connection to $ObjectIdentity(0, cim:LoadBreakSwitch)?
  - List all circuit breakers that are linked to the load break switch $ObjectIdentity(0,
    cim:LoadBreakSwitch).
  - Show me all breakers that are connected through terminals to the load break switch
    $ObjectIdentity(0, cim:LoadBreakSwitch).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:LoadBreakSwitch)}
    .

    {$ObjectIdentity(0, cim:LoadBreakSwitch)} a cim:LoadBreakSwitch ;

    .'
  template_id: template_list_636b99027eff871b0088b813b26259a0
- description: A graph pattern which lists all values for breaker limited by parameters
    for petersencoil (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters petersencoil and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#PetersenCoil
  paraphrases:
  - Which breakers are connected to $ObjectIdentity(0, cim:PetersenCoil) through their
    terminals?
  - Can you identify the circuit breakers that are associated with $ObjectIdentity(0,
    cim:PetersenCoil)?
  - What breakers have a terminal connection to $ObjectIdentity(0, cim:PetersenCoil)?
  - List all breakers that interact with $ObjectIdentity(0, cim:PetersenCoil) via
    their terminals.
  - Show me the circuit breakers that are linked to the equipment $ObjectIdentity(0,
    cim:PetersenCoil).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:PetersenCoil)}
    .

    {$ObjectIdentity(0, cim:PetersenCoil)} a cim:PetersenCoil ;

    .'
  template_id: template_list_dbd81a67149e6c0e32c2849d1338e98d
- description: A graph pattern which lists all values for breaker limited by parameters
    for stationsupply (https://cim.ucaiug.io/rules#Equipment.Terminals, https://cim.ucaiug.io/rules#Terminal.Equipment)
    and by filter properties none.
  filters: []
  name: List breaker by parameters stationsupply and filters none
  outputs:
  - name: breaker
    type: cim:Breaker
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/rules#Equipment.Terminals
    - https://cim.ucaiug.io/rules#Terminal.Equipment
    type: https://cim.ucaiug.io/ns#StationSupply
  paraphrases:
  - Which circuit breakers are associated with $ObjectIdentity(0, cim:StationSupply)?
  - Can you identify all breakers connected to $ObjectIdentity(0, cim:StationSupply)?
  - What are the breakers linked via terminals to $ObjectIdentity(0, cim:StationSupply)?
  - Find all circuit breakers that are connected to the station supply $ObjectIdentity(0,
    cim:StationSupply).
  - Show me the breakers that establish a terminal connection with $ObjectIdentity(0,
    cim:StationSupply).
  questions: []
  sparql_template: '?breaker a cim:Breaker ;

    cimr:Equipment.Terminals/cimr:Terminal.Equipment {$ObjectIdentity(0, cim:StationSupply)}
    .

    {$ObjectIdentity(0, cim:StationSupply)} a cim:StationSupply ;

    .'
  template_id: template_list_591a5e66b60ee9b5981d9f48f7a97823
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties none.
  filters: []
  name: List boundarypoint by parameters none and filters none
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - What are all the boundary points in the system?
  - Can you list all entities classified as boundary points?
  - Show me all the boundary points available.
  - Which points are identified as boundary points?
  - Display the complete list of boundary points.
  questions:
  - id: question_300ffa270799887dfac32eca829c2aca
    parameter_bindings: {}
    question_text: Show me all the boundary points available.
    reference_steps:
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}},
          {"boundarypoint": {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: ?boundarypoint a eu:BoundaryPoint .
  template_id: template_list_57d3bcb91e8b105db48f0d233d253fe4
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for connectivitynode (https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode)
    and by filter properties none.
  filters: []
  name: List boundarypoint by parameters connectivitynode and filters none
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode
    type: https://cim.ucaiug.io/ns#ConnectivityNode
  paraphrases:
  - Which boundary points are associated with the connectivity node $ObjectIdentity(0,
    cim:ConnectivityNode)?
  - Can you identify all boundary points linked to $ObjectIdentity(0, cim:ConnectivityNode)?
  - What are the boundary points that have $ObjectIdentity(0, cim:ConnectivityNode)
    as their connectivity node?
  - Show me the boundary points associated with the connectivity node $ObjectIdentity(0,
    cim:ConnectivityNode).
  - List all boundary points connected to the specified connectivity node $ObjectIdentity(0,
    cim:ConnectivityNode).
  questions:
  - id: question_34c4b032b945d6ddacfb14b175c08a49
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
    question_text: Can you identify all boundary points linked to ARENDAL CN 015?
    reference_steps:
    - - args:
          query: ARENDAL CN 015
        name: iri_discovery
        output: urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c>
            .

            <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_a3065715e964d1c5882bb97bc55cafa6
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
    question_text: Show me the boundary points associated with the connectivity node
      45fed034-857e-48df-b6ad-45d82eec564d.
    reference_steps:
    - - args:
          query: 45fed034-857e-48df-b6ad-45d82eec564d
        name: iri_discovery
        output: urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d>
            .

            <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.ConnectivityNode {$ObjectIdentity(0, cim:ConnectivityNode)} .

    {$ObjectIdentity(0, cim:ConnectivityNode)} a cim:ConnectivityNode ;

    .'
  template_id: template_list_dda438d736d157520e4bb6f81f890eb5
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties boundarypoint.fromendisocode.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.fromEndIsoCode
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters none and filters boundarypoint.fromendisocode
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - Which boundary points have a from-end ISO code of $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndIsoCode, xsd:string)?
  - Can you identify the boundary points where the from-end is specified by the ISO
    code $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode, xsd:string)?
  - List all boundary points that are associated with the from-end ISO code $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndIsoCode, xsd:string).
  - What are the boundary points with a from-end ISO code of $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndIsoCode, xsd:string)?
  - Find the boundary points where the from-end matches the ISO code $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndIsoCode, xsd:string).
  questions:
  - id: question_8ebcd3be2dead7c67ab5be206161c46b
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode, xsd:string): 'NO'
    question_text: Find the boundary points where the from-end matches the ISO code
      NO.
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.fromEndIsoCode "NO" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}},
          {"boundarypoint": {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.fromEndIsoCode {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string)} .'
  template_id: template_list_ffe3e02d220f3a0a58a60142c2af4408
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties boundarypoint.fromendname.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.fromEndName
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters none and filters boundarypoint.fromendname
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - Which boundary points have a 'from end' name matching $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndName, xsd:string)?
  - Can you identify any boundary points where the from-end name is $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndName, xsd:string)?
  - Show me boundary points whose 'from end' name is specified as $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndName, xsd:string).
  - What are the boundary points with a from-end name set to $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndName, xsd:string)?
  - List all boundary points where the from-end name corresponds to $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndName, xsd:string).
  questions:
  - id: question_10e680933b1686ff534627d8ab2da009
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName, xsd:string): ARENDAL
    question_text: Show me boundary points whose 'from end' name is specified as ARENDAL.
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.fromEndName "ARENDAL" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_b3b3dd997ae710cee7ba2a77703d90d7
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName, xsd:string): Nedenes
    question_text: Can you identify any boundary points where the from-end name is
      Nedenes?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.fromEndName "Nedenes" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.fromEndName {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string)} .'
  template_id: template_list_b8780ed9c9d1c59bd22f6f21f2cbf730
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties boundarypoint.fromendnametso.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.fromEndNameTso
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters none and filters boundarypoint.fromendnametso
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - Which boundary points have a 'from end name TSO' value of $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndNameTso, xsd:string)?
  - Can you identify all boundary points where the from end TSO name is $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndNameTso, xsd:string)?
  - What are the boundary points that specify $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string) as their from end TSO name?
  - List all boundary points with a 'from end name TSO' matching $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndNameTso, xsd:string).
  - Find the boundary points where the TSO name for the 'from end' is $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndNameTso, xsd:string).
  questions:
  - id: question_1aead34b743fec08e41feb8d0207120f
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso, xsd:string): TSO1
    question_text: What are the boundary points that specify TSO1 as their from end
      TSO name?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.fromEndNameTso "TSO1" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_2bc5e08ee029661de44187b4003391f6
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso, xsd:string): DSO1
    question_text: What are the boundary points that specify DSO1 as their from end
      TSO name?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.fromEndNameTso "DSO1" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.fromEndNameTso {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string)} .'
  template_id: template_list_5978dbd87f880c457a4263eae735e3f4
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties boundarypoint.toendisocode.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.toEndIsoCode
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters none and filters boundarypoint.toendisocode
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - Which boundary points have a to-end ISO code of $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndIsoCode, xsd:string)?
  - Can you list all boundary points where the to-end ISO code is $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndIsoCode, xsd:string)?
  - What are the boundary points associated with the to-end ISO code $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndIsoCode, xsd:string)?
  - Find all boundary points that have their to-end ISO code set to $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndIsoCode, xsd:string).
  - Show me the boundary points where the to-end ISO code matches $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndIsoCode, xsd:string).
  questions:
  - id: question_794c335a5916252092b61b568bda1c7f
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndIsoCode, xsd:string): 'NO'
    question_text: Can you list all boundary points where the to-end ISO code is NO?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.toEndIsoCode "NO" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}},
          {"boundarypoint": {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.toEndIsoCode {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndIsoCode,
    xsd:string)} .'
  template_id: template_list_d83ea0f3c2f955db5d49dbdd39400259
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties boundarypoint.toendname.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.toEndName
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters none and filters boundarypoint.toendname
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - What are the boundary points with the to-end name set to $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndName, xsd:string)?
  - Can you list the boundary points where the to-end name is $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndName, xsd:string)?
  - Which boundary points are identified with the to-end name $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndName, xsd:string)?
  - Find all boundary points that have the to-end name specified as $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndName, xsd:string).
  - Show me the boundary points where the to-end name matches $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndName, xsd:string).
  questions:
  - id: question_96b7d68fc58921c1d90aaeaabff52b0b
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndName, xsd:string): ARENDAL
    question_text: Can you list the boundary points where the to-end name is ARENDAL?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.toEndName "ARENDAL" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_29b7ecb0cabd990ce461b80cded17e0a
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndName, xsd:string): Nedenes
    question_text: Can you list the boundary points where the to-end name is Nedenes?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.toEndName "Nedenes" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.toEndName {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndName,
    xsd:string)} .'
  template_id: template_list_a6805e3fbc2c26e9f3b62fa800fd5c2f
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for none and by filter properties boundarypoint.toendnametso.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.toEndNameTso
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters none and filters boundarypoint.toendnametso
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters: []
  paraphrases:
  - Which boundary points are associated with the TSO name $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndNameTso, xsd:string)?
  - Can you identify all boundary points that have the TSO end name $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndNameTso, xsd:string)?
  - Find boundary points where the Transmission System Operator (TSO) end name is
    listed as $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndNameTso, xsd:string).
  - What are the boundary points with the TSO identifier $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndNameTso, xsd:string)?
  - Show me all boundary points that match the TSO name $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.toEndNameTso, xsd:string).
  questions:
  - id: question_2b1724e2e87a689f741710107c051a1b
    parameter_bindings:
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndNameTso, xsd:string): DSO1
    question_text: Find boundary points where the Transmission System Operator (TSO)
      end name is listed as DSO1.
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.toEndNameTso "DSO1" .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}},
          {"boundarypoint": {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.toEndNameTso {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.toEndNameTso,
    xsd:string)} .'
  template_id: template_list_5a3d78c979f986d9cfe0dd5eb18cd9aa
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for connectivitynode (https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode)
    and by filter properties boundarypoint.fromendisocode.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.fromEndIsoCode
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters connectivitynode and filters boundarypoint.fromendisocode
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode
    type: https://cim.ucaiug.io/ns#ConnectivityNode
  paraphrases:
  - What boundary points are associated with $ObjectIdentity(0, cim:ConnectivityNode)
    and have a from-end ISO code of $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string)?
  - Can you identify all boundary points linked to $ObjectIdentity(0, cim:ConnectivityNode)
    that possess the from-end ISO code $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string)?
  - Which boundary points are connected to $ObjectIdentity(0, cim:ConnectivityNode)
    and defined by the from-end ISO code $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string)?
  - List all boundary points related to $ObjectIdentity(0, cim:ConnectivityNode) where
    the from-end ISO code is $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string).
  - Display all boundary points that interact with $ObjectIdentity(0, cim:ConnectivityNode)
    and feature the from-end ISO code $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string).
  questions:
  - id: question_f5735cff56f71fd7a39f1dc4de7e2be0
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode, xsd:string): 'NO'
    question_text: Can you identify all boundary points linked to XARE1_XARE2 CN that
      possess the from-end ISO code NO?
    reference_steps:
    - - args:
          query: XARE1_XARE2 CN
        name: iri_discovery
        output: urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c>
            ;

            eu:BoundaryPoint.fromEndIsoCode "NO" .

            <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_210863dc9578682221b97ea631ba86e9
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode, xsd:string): 'NO'
    question_text: Which boundary points are connected to XNED1_XNED2 CN and defined
      by the from-end ISO code NO?
    reference_steps:
    - - args:
          query: XNED1_XNED2 CN
        name: iri_discovery
        output: urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d>
            ;

            eu:BoundaryPoint.fromEndIsoCode "NO" .

            <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.ConnectivityNode {$ObjectIdentity(0, cim:ConnectivityNode)} ;

    eu:BoundaryPoint.fromEndIsoCode {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndIsoCode,
    xsd:string)} .

    {$ObjectIdentity(0, cim:ConnectivityNode)} a cim:ConnectivityNode ;

    .'
  template_id: template_list_5916f2ed4337084f4bfd26e838cfd91e
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for connectivitynode (https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode)
    and by filter properties boundarypoint.fromendname.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.fromEndName
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters connectivitynode and filters boundarypoint.fromendname
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode
    type: https://cim.ucaiug.io/ns#ConnectivityNode
  paraphrases:
  - What boundary points are connected to $ObjectIdentity(0, cim:ConnectivityNode)
    with a 'fromEndName' of $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string)?
  - Can you identify all boundary points associated with $ObjectIdentity(0, cim:ConnectivityNode)
    where the 'fromEndName' is $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string)?
  - Show me boundary points that reference $ObjectIdentity(0, cim:ConnectivityNode)
    and have a from-end name value of $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string).
  - Which boundary points are linked to $ObjectIdentity(0, cim:ConnectivityNode) with
    the specific 'fromEndName' attribute set to $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string)?
  - List all the boundary points connected to $ObjectIdentity(0, cim:ConnectivityNode)
    where the 'fromEndName' matches $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string).
  questions:
  - id: question_13d64b3cdb1daba7f42571b57f0f8b35
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName, xsd:string): ARENDAL
    question_text: Show me boundary points that reference XARE1_XARE2 CN and have
      a from-end name value of ARENDAL.
    reference_steps:
    - - args:
          query: XARE1_XARE2 CN
        name: iri_discovery
        output: urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c>
            ;

            eu:BoundaryPoint.fromEndName "ARENDAL" .

            <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_3c356d6c651103728572a37939351cf3
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName, xsd:string): Nedenes
    question_text: Which boundary points are linked to XNED1_XNED2 CN with the specific
      'fromEndName' attribute set to Nedenes?
    reference_steps:
    - - args:
          query: XNED1_XNED2 CN
        name: iri_discovery
        output: urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d>
            ;

            eu:BoundaryPoint.fromEndName "Nedenes" .

            <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.ConnectivityNode {$ObjectIdentity(0, cim:ConnectivityNode)} ;

    eu:BoundaryPoint.fromEndName {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndName,
    xsd:string)} .

    {$ObjectIdentity(0, cim:ConnectivityNode)} a cim:ConnectivityNode ;

    .'
  template_id: template_list_507fdaa033b24880b6e42431d2cf2a16
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for connectivitynode (https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode)
    and by filter properties boundarypoint.fromendnametso.
  filters:
  - property: https://cim.ucaiug.io/ns/eu#BoundaryPoint.fromEndNameTso
    subject: eu:BoundaryPoint
    type: xsd:string
  name: List boundarypoint by parameters connectivitynode and filters boundarypoint.fromendnametso
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode
    type: https://cim.ucaiug.io/ns#ConnectivityNode
  paraphrases:
  - Which boundary points are associated with the connectivity node $ObjectIdentity(0,
    cim:ConnectivityNode) and have the from-end TSO name $ValueFilter(eu:BoundaryPoint,
    eu:BoundaryPoint.fromEndNameTso, xsd:string)?
  - Can you identify all boundary points connected to $ObjectIdentity(0, cim:ConnectivityNode)
    with the from-end TSO name specified as $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string)?
  - List the boundary points linked to $ObjectIdentity(0, cim:ConnectivityNode) where
    the fromEndNameTso is $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string).
  - What are the boundary points connected to $ObjectIdentity(0, cim:ConnectivityNode)
    that have the from-end TSO name $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string)?
  - Find all boundary points related to $ObjectIdentity(0, cim:ConnectivityNode) with
    a from-end name on the TSO as $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string).
  questions:
  - id: question_8fad4e2222ba7510ffc6e1bb457dd68c
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso, xsd:string): TSO1
    question_text: List the boundary points linked to XARE1_XARE2 CN where the fromEndNameTso
      is TSO1.
    reference_steps:
    - - args:
          query: XARE1_XARE2 CN
        name: iri_discovery
        output: urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c>
            ;

            eu:BoundaryPoint.fromEndNameTso "TSO1" .

            <urn:uuid:cb837454-5c66-d341-be63-d0c044e5fd3c> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_0caf4e5bc6fc43f265b2c7c9894eef31
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNode): urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
      $ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso, xsd:string): DSO1
    question_text: Which boundary points are associated with the connectivity node
      XNED1_XNED2 CN and have the from-end TSO name DSO1?
    reference_steps:
    - - args:
          query: XNED1_XNED2 CN
        name: iri_discovery
        output: urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d>
            ;

            eu:BoundaryPoint.fromEndNameTso "DSO1" .

            <urn:uuid:45fed034-857e-48df-b6ad-45d82eec564d> a cim:ConnectivityNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.ConnectivityNode {$ObjectIdentity(0, cim:ConnectivityNode)} ;

    eu:BoundaryPoint.fromEndNameTso {$ValueFilter(eu:BoundaryPoint, eu:BoundaryPoint.fromEndNameTso,
    xsd:string)} .

    {$ObjectIdentity(0, cim:ConnectivityNode)} a cim:ConnectivityNode ;

    .'
  template_id: template_list_72f0f9168bd999f9ce06c76c602a7466
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for connectivitynodecontainer (https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode,
    https://cim.ucaiug.io/ns#ConnectivityNode.ConnectivityNodeContainer) and by filter
    properties none.
  filters: []
  name: List boundarypoint by parameters connectivitynodecontainer and filters none
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode
    - https://cim.ucaiug.io/ns#ConnectivityNode.ConnectivityNodeContainer
    type: https://cim.ucaiug.io/ns#ConnectivityNodeContainer
  paraphrases:
  - Which boundary points are associated with the connectivity node container $ObjectIdentity(0,
    cim:ConnectivityNodeContainer)?
  - Can you identify all boundary points connected to $ObjectIdentity(0, cim:ConnectivityNodeContainer)?
  - What are the boundary points linked to the connectivity node container $ObjectIdentity(0,
    cim:ConnectivityNodeContainer)?
  - List all boundary points that belong to the connectivity node container $ObjectIdentity(0,
    cim:ConnectivityNodeContainer).
  - Show me the boundary points associated within $ObjectIdentity(0, cim:ConnectivityNodeContainer).
  questions:
  - id: question_29038be37ad2e7f94fc0731aa118f531
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNodeContainer): urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3
    question_text: List all boundary points that belong to the connectivity node container
      1f4fabd4-8c57-c245-b107-4e64c9007ae3.
    reference_steps:
    - - args:
          query: 1f4fabd4-8c57-c245-b107-4e64c9007ae3
        name: iri_discovery
        output: urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.ConnectivityNodeContainer
            <urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3> .

            <urn:uuid:1f4fabd4-8c57-c245-b107-4e64c9007ae3> a cim:ConnectivityNodeContainer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_375be8b91012f4f223aeb8d182c300ec
    parameter_bindings:
      $ObjectIdentity(0, cim:ConnectivityNodeContainer): urn:uuid:681a21b6-5a55-11eb-a658-74e5f963e191
    question_text: What are the boundary points linked to the connectivity node container
      NEDENES 04?
    reference_steps:
    - - args:
          query: NEDENES 04
        name: iri_discovery
        output: urn:uuid:681a21b6-5a55-11eb-a658-74e5f963e191
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.ConnectivityNodeContainer
            <urn:uuid:681a21b6-5a55-11eb-a658-74e5f963e191> .

            <urn:uuid:681a21b6-5a55-11eb-a658-74e5f963e191> a cim:ConnectivityNodeContainer
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.ConnectivityNodeContainer
    {$ObjectIdentity(0, cim:ConnectivityNodeContainer)} .

    {$ObjectIdentity(0, cim:ConnectivityNodeContainer)} a cim:ConnectivityNodeContainer
    ;

    .'
  template_id: template_list_8778a18a41bc4a2bd25e5278b8926cd4
- description: A graph pattern which lists all values for boundarypoint limited by
    parameters for topologicalnode (https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode,
    https://cim.ucaiug.io/ns#ConnectivityNode.TopologicalNode) and by filter properties
    none.
  filters: []
  name: List boundarypoint by parameters topologicalnode and filters none
  outputs:
  - name: boundarypoint
    type: eu:BoundaryPoint
  parameters:
  - name: param_0
    path:
    - https://cim.ucaiug.io/ns/eu#BoundaryPoint.ConnectivityNode
    - https://cim.ucaiug.io/ns#ConnectivityNode.TopologicalNode
    type: https://cim.ucaiug.io/ns#TopologicalNode
  paraphrases:
  - Which boundary points are connected to the topological node $ObjectIdentity(0,
    cim:TopologicalNode)?
  - Can you list all boundary points that are linked via connectivity nodes to $ObjectIdentity(0,
    cim:TopologicalNode)?
  - What boundary points are associated with the topological node $ObjectIdentity(0,
    cim:TopologicalNode)?
  - Find the boundary points that establish a connection with $ObjectIdentity(0, cim:TopologicalNode)
    through connectivity nodes.
  - Show me all boundary points connected to the topological node $ObjectIdentity(0,
    cim:TopologicalNode).
  questions:
  - id: question_9518ef3b017755f0ac3f2481d25c56c2
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:47eb7c25-d0f6-11e7-9f7b-b46d83638f70
    question_text: Find the boundary points that establish a connection with 47eb7c25-d0f6-11e7-9f7b-b46d83638f70
      through connectivity nodes.
    reference_steps:
    - - args:
          query: 47eb7c25-d0f6-11e7-9f7b-b46d83638f70
        name: iri_discovery
        output: urn:uuid:47eb7c25-d0f6-11e7-9f7b-b46d83638f70
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.TopologicalNode
            <urn:uuid:47eb7c25-d0f6-11e7-9f7b-b46d83638f70> .

            <urn:uuid:47eb7c25-d0f6-11e7-9f7b-b46d83638f70> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_04af91b06155976d24f826a240ab6bc6
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa235-9549-11ec-b226-48ba4eadba68
    question_text: Can you list all boundary points that are linked via connectivity
      nodes to 734aa235-9549-11ec-b226-48ba4eadba68?
    reference_steps:
    - - args:
          query: 734aa235-9549-11ec-b226-48ba4eadba68
        name: iri_discovery
        output: urn:uuid:734aa235-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.TopologicalNode
            <urn:uuid:734aa235-9549-11ec-b226-48ba4eadba68> .

            <urn:uuid:734aa235-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:048e8349-1963-4d55-a842-f74c4de8fe0f"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  - id: question_955a364f8a863fb7bde0a7bae7e042d2
    parameter_bindings:
      $ObjectIdentity(0, cim:TopologicalNode): urn:uuid:734aa243-9549-11ec-b226-48ba4eadba68
    question_text: Find the boundary points that establish a connection with 734aa243-9549-11ec-b226-48ba4eadba68
      through connectivity nodes.
    reference_steps:
    - - args:
          query: 734aa243-9549-11ec-b226-48ba4eadba68
        name: iri_discovery
        output: urn:uuid:734aa243-9549-11ec-b226-48ba4eadba68
        output_media_type: text/uri
        required_columns:
        - uri
    - - args:
          query: 'SELECT ?boundarypoint WHERE {

            ?boundarypoint a eu:BoundaryPoint ;

            eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.TopologicalNode
            <urn:uuid:734aa243-9549-11ec-b226-48ba4eadba68> .

            <urn:uuid:734aa243-9549-11ec-b226-48ba4eadba68> a cim:TopologicalNode
            ;

            .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["boundarypoint"]}, "results": {"bindings": [{"boundarypoint":
          {"type": "uri", "value": "urn:uuid:e961d4f3-7d72-476b-9ae3-4bab97e87ced"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - boundarypoint
  sparql_template: '?boundarypoint a eu:BoundaryPoint ;

    eu:BoundaryPoint.ConnectivityNode/cim:ConnectivityNode.TopologicalNode {$ObjectIdentity(0,
    cim:TopologicalNode)} .

    {$ObjectIdentity(0, cim:TopologicalNode)} a cim:TopologicalNode ;

    .'
  template_id: template_list_7ab8867369ff7f45afdcb29bdbccc3d9
- description: A graph pattern which lists all values for synchronousarea limited
    by parameters for none and by filter properties none.
  filters: []
  name: List synchronousarea by parameters none and filters none
  outputs:
  - name: synchronousarea
    type: nc:SynchronousArea
  parameters: []
  paraphrases:
  - What are the different synchronous areas present in the network?
  - Can you list all the entities classified as a nc:SynchronousArea?
  - Which regions, categorized as synchronous areas, are part of the network?
  - I need to find all synchronous areas defined by the system. Can you provide those?
  - Show me all synchronous areas represented in the ontology.
  questions:
  - id: question_8b424a77194b32afee5a3ebdd2603514
    parameter_bindings: {}
    question_text: I need to find all synchronous areas defined by the system. Can
      you provide those?
    reference_steps:
    - - args:
          query: 'SELECT ?synchronousarea WHERE {

            ?synchronousarea a nc:SynchronousArea .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["synchronousarea"]}, "results": {"bindings": [{"synchronousarea":
          {"type": "uri", "value": "urn:uuid:0fd1ebd0-300c-49a3-a696-9597c325b3c0"}},
          {"synchronousarea": {"type": "uri", "value": "urn:uuid:5829041b-1f25-4a3d-8b4c-532d9f0b6e54"}},
          {"synchronousarea": {"type": "uri", "value": "urn:uuid:2bb01483-28f2-4a79-a9c6-754478445e30"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - synchronousarea
  sparql_template: ?synchronousarea a nc:SynchronousArea .
  template_id: template_list_c7a70c0b8203742bf6437567335459a1
- description: A graph pattern which lists all values for synchronousarea limited
    by parameters for none and by filter properties synchronousarea.nominalfrequency.
  filters:
  - property: https://cim4.eu/ns/nc#SynchronousArea.nominalFrequency
    subject: nc:SynchronousArea
    type: xsd:float
  name: List synchronousarea by parameters none and filters synchronousarea.nominalfrequency
  outputs:
  - name: synchronousarea
    type: nc:SynchronousArea
  parameters: []
  paraphrases:
  - Which synchronous areas operate at a nominal frequency of $ValueFilter(nc:SynchronousArea,
    nc:SynchronousArea.nominalFrequency, xsd:float) Hz?
  - Can you identify synchronous areas with a nominal frequency of $ValueFilter(nc:SynchronousArea,
    nc:SynchronousArea.nominalFrequency, xsd:float) hertz?
  - Show me the synchronous areas where the nominal frequency is set to $ValueFilter(nc:SynchronousArea,
    nc:SynchronousArea.nominalFrequency, xsd:float) Hz.
  - What are the synchronous areas configured to operate at a nominal frequency of
    $ValueFilter(nc:SynchronousArea, nc:SynchronousArea.nominalFrequency, xsd:float)
    Hz?
  - List all synchronous areas that have a nominal frequency rating of $ValueFilter(nc:SynchronousArea,
    nc:SynchronousArea.nominalFrequency, xsd:float) hertz.
  questions:
  - id: question_9c54c84ba3f1bfdda228f3d48472fddd
    parameter_bindings:
      $ValueFilter(nc:SynchronousArea, nc:SynchronousArea.nominalFrequency, xsd:float): '50.0'
    question_text: What are the synchronous areas configured to operate at a nominal
      frequency of 50.0 Hz?
    reference_steps:
    - []
    - - args:
          query: 'SELECT ?synchronousarea WHERE {

            ?synchronousarea a nc:SynchronousArea ;

            nc:SynchronousArea.nominalFrequency "50.0"^^xsd:float .

            }'
        name: sparql_query
        output: '{"head": {"vars": ["synchronousarea"]}, "results": {"bindings": [{"synchronousarea":
          {"type": "uri", "value": "urn:uuid:0fd1ebd0-300c-49a3-a696-9597c325b3c0"}},
          {"synchronousarea": {"type": "uri", "value": "urn:uuid:5829041b-1f25-4a3d-8b4c-532d9f0b6e54"}},
          {"synchronousarea": {"type": "uri", "value": "urn:uuid:2bb01483-28f2-4a79-a9c6-754478445e30"}}]}}'
        output_media_type: application/sparql-results+json
        required_columns:
        - synchronousarea
  sparql_template: '?synchronousarea a nc:SynchronousArea ;

    nc:SynchronousArea.nominalFrequency {$ValueFilter(nc:SynchronousArea, nc:SynchronousArea.nominalFrequency,
    xsd:float)} .'
  template_id: template_list_ff0970f246a1a3150794e5f839da6cb0
